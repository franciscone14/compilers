# Generated from /home/franciscone/Faculdade/Codigos/compilers/compiler/src/parser/JavaParser.g4 by ANTLR 4.7
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3o")
        buf.write("\u0519\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\3\2\5\2\u0144\n\2\3\2\5\2\u0147")
        buf.write("\n\2\3\2\5\2\u014a\n\2\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3\4")
        buf.write("\7\4\u0154\n\4\f\4\16\4\u0157\13\4\3\5\3\5\3\5\3\5\3\5")
        buf.write("\3\5\3\5\5\5\u0160\n\5\3\6\6\6\u0163\n\6\r\6\16\6\u0164")
        buf.write("\3\7\3\7\5\7\u0169\n\7\3\b\5\b\u016c\n\b\3\b\3\b\3\b\5")
        buf.write("\b\u0171\n\b\3\b\5\b\u0174\n\b\3\b\3\b\3\t\3\t\7\t\u017a")
        buf.write("\n\t\f\t\16\t\u017d\13\t\3\n\3\n\3\13\3\13\3\13\3\f\3")
        buf.write("\f\3\f\3\r\3\r\3\r\7\r\u018a\n\r\f\r\16\r\u018d\13\r\3")
        buf.write("\16\3\16\5\16\u0191\n\16\3\16\3\16\3\17\3\17\3\17\3\17")
        buf.write("\3\17\7\17\u019a\n\17\f\17\16\17\u019d\13\17\3\20\3\20")
        buf.write("\3\20\5\20\u01a2\n\20\3\21\3\21\5\21\u01a6\n\21\3\22\3")
        buf.write("\22\3\22\3\23\5\23\u01ac\n\23\3\23\3\23\5\23\u01b0\n\23")
        buf.write("\3\23\3\23\3\24\3\24\3\24\3\24\3\24\7\24\u01b9\n\24\f")
        buf.write("\24\16\24\u01bc\13\24\3\25\3\25\3\26\3\26\3\26\5\26\u01c3")
        buf.write("\n\26\3\26\3\26\3\27\3\27\3\27\7\27\u01ca\n\27\f\27\16")
        buf.write("\27\u01cd\13\27\3\30\3\30\3\30\3\31\3\31\3\31\3\32\3\32")
        buf.write("\3\32\7\32\u01d8\n\32\f\32\16\32\u01db\13\32\3\33\3\33")
        buf.write("\5\33\u01df\n\33\3\33\5\33\u01e2\n\33\3\33\3\33\3\34\3")
        buf.write("\34\3\34\5\34\u01e9\n\34\3\34\3\34\3\34\3\34\5\34\u01ef")
        buf.write("\n\34\3\34\5\34\u01f2\n\34\3\35\5\35\u01f5\n\35\3\35\3")
        buf.write("\35\3\35\3\36\6\36\u01fb\n\36\r\36\16\36\u01fc\3\37\3")
        buf.write("\37\3 \3 \3 \7 \u0204\n \f \16 \u0207\13 \3!\3!\3!\3!")
        buf.write("\3!\5!\u020e\n!\3\"\3\"\3\"\7\"\u0213\n\"\f\"\16\"\u0216")
        buf.write("\13\"\3#\3#\5#\u021a\n#\3$\3$\3$\3%\5%\u0220\n%\3%\3%")
        buf.write("\3%\5%\u0225\n%\3&\3&\5&\u0229\n&\3\'\3\'\3\'\3\'\3\'")
        buf.write("\7\'\u0230\n\'\f\'\16\'\u0233\13\'\3(\3(\3)\3)\3)\5)\u023a")
        buf.write("\n)\3)\3)\3*\3*\5*\u0240\n*\3+\5+\u0243\n+\3+\3+\3+\5")
        buf.write("+\u0248\n+\3+\3+\3,\6,\u024d\n,\r,\16,\u024e\3-\3-\3.")
        buf.write("\3.\3.\3.\6.\u0257\n.\r.\16.\u0258\3/\3/\5/\u025d\n/\3")
        buf.write("/\3/\3\60\6\60\u0262\n\60\r\60\16\60\u0263\3\61\3\61\5")
        buf.write("\61\u0268\n\61\3\62\3\62\3\62\3\62\3\63\3\63\3\64\5\64")
        buf.write("\u0271\n\64\3\64\3\64\3\64\5\64\u0276\n\64\3\65\3\65\3")
        buf.write("\65\3\65\3\65\7\65\u027d\n\65\f\65\16\65\u0280\13\65\3")
        buf.write("\66\3\66\3\67\3\67\5\67\u0286\n\67\3\67\5\67\u0289\n\67")
        buf.write("\3\67\3\67\38\38\38\78\u0290\n8\f8\168\u0293\138\39\3")
        buf.write("9\39\39\79\u0299\n9\f9\169\u029c\139\59\u029e\n9\3:\3")
        buf.write(":\5:\u02a2\n:\3;\3;\5;\u02a6\n;\3<\3<\3=\3=\3>\3>\5>\u02ae")
        buf.write("\n>\3?\3?\3@\3@\3A\3A\5A\u02b6\nA\3A\3A\3B\6B\u02bb\n")
        buf.write("B\rB\16B\u02bc\3C\3C\5C\u02c1\nC\3D\3D\3E\3E\3E\3F\3F")
        buf.write("\3F\3F\3F\3F\5F\u02ce\nF\3G\3G\3G\3G\3G\5G\u02d5\nG\3")
        buf.write("H\3H\3H\3H\3H\3H\3H\3H\3H\3H\5H\u02e1\nH\3I\3I\3I\3I\3")
        buf.write("J\3J\3J\3J\3K\3K\3L\3L\3L\3L\3L\3L\3L\5L\u02f4\nL\3M\3")
        buf.write("M\3M\3M\3M\3M\3N\3N\3N\3N\3N\3N\3N\3N\3O\3O\3O\3O\3O\3")
        buf.write("O\3O\3O\3P\3P\3P\3P\3P\3P\3Q\3Q\5Q\u0314\nQ\3Q\5Q\u0317")
        buf.write("\nQ\3Q\3Q\3R\6R\u031c\nR\rR\16R\u031d\3S\3S\3S\3T\3T\3")
        buf.write("U\3U\3U\3U\6U\u0329\nU\rU\16U\u032a\3U\3U\5U\u032f\nU")
        buf.write("\3V\3V\3V\3V\3V\3V\3W\3W\3W\3W\3W\3W\3X\3X\3X\3X\3X\3")
        buf.write("X\3X\3Y\3Y\3Y\5Y\u0347\nY\3Y\3Y\5Y\u034b\nY\3Y\3Y\5Y\u034f")
        buf.write("\nY\3Y\3Y\3Y\3Z\3Z\3Z\5Z\u0357\nZ\3Z\3Z\5Z\u035b\nZ\3")
        buf.write("Z\3Z\5Z\u035f\nZ\3Z\3Z\3Z\3[\3[\5[\u0366\n[\3\\\3\\\3")
        buf.write("]\3]\3]\7]\u036d\n]\f]\16]\u0370\13]\3^\3^\5^\u0374\n")
        buf.write("^\3_\3_\5_\u0378\n_\3`\3`\5`\u037c\n`\3a\3a\3a\3b\3b\3")
        buf.write("b\3b\3b\3b\3c\3c\3c\3c\3c\3c\3c\5c\u038e\nc\3c\3c\5c\u0392")
        buf.write("\nc\3d\3d\3e\3e\3e\3e\3e\3e\6e\u039c\ne\re\16e\u039d\3")
        buf.write("f\3f\3f\3g\3g\3h\3h\3i\3i\5i\u03a9\ni\3j\3j\3j\3j\3k\3")
        buf.write("k\3k\5k\u03b2\nk\3l\3l\3m\3m\3m\3m\3m\3m\3m\5m\u03bd\n")
        buf.write("m\3n\3n\3n\7n\u03c2\nn\fn\16n\u03c5\13n\3o\3o\3o\7o\u03ca")
        buf.write("\no\fo\16o\u03cd\13o\3p\3p\3q\3q\3q\7q\u03d4\nq\fq\16")
        buf.write("q\u03d7\13q\3r\3r\3r\7r\u03dc\nr\fr\16r\u03df\13r\3s\3")
        buf.write("s\3s\3s\3s\3s\3s\3s\3s\7s\u03ea\ns\fs\16s\u03ed\13s\3")
        buf.write("t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\7t\u03fa\nt\ft\16t\u03fd")
        buf.write("\13t\3u\3u\3u\3u\3u\3u\3u\7u\u0406\nu\fu\16u\u0409\13")
        buf.write("u\3v\3v\3v\3v\3v\7v\u0410\nv\fv\16v\u0413\13v\3w\3w\3")
        buf.write("w\3w\3w\3w\3w\7w\u041c\nw\fw\16w\u041f\13w\3x\3x\3x\3")
        buf.write("x\3x\3x\3x\3x\3x\3x\5x\u042b\nx\3y\3y\3y\3y\3y\3y\3y\5")
        buf.write("y\u0434\ny\3z\3z\3z\3{\3{\3{\3|\3|\3|\3|\3|\3|\5|\u0442")
        buf.write("\n|\3}\3}\3}\3~\3~\3~\3\177\3\177\5\177\u044c\n\177\3")
        buf.write("\u0080\3\u0080\3\u0080\5\u0080\u0451\n\u0080\3\u0080\3")
        buf.write("\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\5\u0080")
        buf.write("\u045a\n\u0080\3\u0080\5\u0080\u045d\n\u0080\3\u0081\3")
        buf.write("\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\5\u0081\u0467\n\u0081\3\u0082\3\u0082\5\u0082\u046b\n")
        buf.write("\u0082\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083")
        buf.write("\3\u0083\5\u0083\u0474\n\u0083\3\u0084\3\u0084\3\u0084")
        buf.write("\3\u0084\5\u0084\u047a\n\u0084\3\u0084\3\u0084\3\u0085")
        buf.write("\3\u0085\3\u0085\7\u0085\u0481\n\u0085\f\u0085\16\u0085")
        buf.write("\u0484\13\u0085\3\u0086\3\u0086\3\u0086\3\u0086\5\u0086")
        buf.write("\u048a\n\u0086\3\u0086\3\u0086\3\u0086\3\u0086\5\u0086")
        buf.write("\u0490\n\u0086\5\u0086\u0492\n\u0086\3\u0087\6\u0087\u0495")
        buf.write("\n\u0087\r\u0087\16\u0087\u0496\3\u0088\3\u0088\3\u0088")
        buf.write("\3\u0088\3\u0089\3\u0089\6\u0089\u049f\n\u0089\r\u0089")
        buf.write("\16\u0089\u04a0\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\5\u008a\u04ad")
        buf.write("\n\u008a\3\u008b\3\u008b\3\u008b\7\u008b\u04b2\n\u008b")
        buf.write("\f\u008b\16\u008b\u04b5\13\u008b\3\u008c\3\u008c\3\u008c")
        buf.write("\3\u008c\3\u008c\5\u008c\u04bc\n\u008c\3\u008d\3\u008d")
        buf.write("\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\5\u008e\u04c5")
        buf.write("\n\u008e\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\5\u008f")
        buf.write("\u04cc\n\u008f\3\u0090\3\u0090\3\u0090\7\u0090\u04d1\n")
        buf.write("\u0090\f\u0090\16\u0090\u04d4\13\u0090\3\u0091\3\u0091")
        buf.write("\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u04dc\n\u0091")
        buf.write("\3\u0092\3\u0092\3\u0092\5\u0092\u04e1\n\u0092\3\u0093")
        buf.write("\3\u0093\5\u0093\u04e5\n\u0093\3\u0094\3\u0094\5\u0094")
        buf.write("\u04e9\n\u0094\3\u0095\3\u0095\5\u0095\u04ed\n\u0095\3")
        buf.write("\u0096\3\u0096\3\u0097\6\u0097\u04f2\n\u0097\r\u0097\16")
        buf.write("\u0097\u04f3\3\u0098\3\u0098\3\u0098\5\u0098\u04f9\n\u0098")
        buf.write("\3\u0098\5\u0098\u04fc\n\u0098\3\u0098\5\u0098\u04ff\n")
        buf.write("\u0098\3\u0099\3\u0099\3\u0099\3\u009a\3\u009a\3\u009b")
        buf.write("\5\u009b\u0507\n\u009b\3\u009b\3\u009b\3\u009c\3\u009c")
        buf.write("\3\u009d\3\u009d\3\u009e\3\u009e\3\u009f\3\u009f\3\u009f")
        buf.write("\3\u009f\3\u00a0\3\u00a0\3\u00a1\3\u00a1\3\u00a1\2\b\6")
        buf.write("\34&Lh\u00e4\u00a2\2\4\6\b\n\f\16\20\22\24\26\30\32\34")
        buf.write("\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjln")
        buf.write("prtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e")
        buf.write("\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0")
        buf.write("\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2")
        buf.write("\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4")
        buf.write("\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6")
        buf.write("\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8")
        buf.write("\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa")
        buf.write("\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c")
        buf.write("\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e")
        buf.write("\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130")
        buf.write("\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\2\13")
        buf.write("\3\2\31\33\3\2\33\35\5\2\32\35  #$\6\2\31\35  ))jj\4\2")
        buf.write("\31\31\33\33\4\2\32\33  \3\2\13\17\3\2+\65\3\2\66\67\2")
        buf.write("\u0524\2\u0143\3\2\2\2\4\u014b\3\2\2\2\6\u014e\3\2\2\2")
        buf.write("\b\u015f\3\2\2\2\n\u0162\3\2\2\2\f\u0168\3\2\2\2\16\u016b")
        buf.write("\3\2\2\2\20\u0177\3\2\2\2\22\u017e\3\2\2\2\24\u0180\3")
        buf.write("\2\2\2\26\u0183\3\2\2\2\30\u0186\3\2\2\2\32\u018e\3\2")
        buf.write("\2\2\34\u0194\3\2\2\2\36\u01a1\3\2\2\2 \u01a5\3\2\2\2")
        buf.write("\"\u01a7\3\2\2\2$\u01ab\3\2\2\2&\u01b3\3\2\2\2(\u01bd")
        buf.write("\3\2\2\2*\u01bf\3\2\2\2,\u01c6\3\2\2\2.\u01ce\3\2\2\2")
        buf.write("\60\u01d1\3\2\2\2\62\u01d4\3\2\2\2\64\u01dc\3\2\2\2\66")
        buf.write("\u01f1\3\2\2\28\u01f4\3\2\2\2:\u01fa\3\2\2\2<\u01fe\3")
        buf.write("\2\2\2>\u0200\3\2\2\2@\u020d\3\2\2\2B\u020f\3\2\2\2D\u0219")
        buf.write("\3\2\2\2F\u021b\3\2\2\2H\u021f\3\2\2\2J\u0228\3\2\2\2")
        buf.write("L\u022a\3\2\2\2N\u0234\3\2\2\2P\u0236\3\2\2\2R\u023f\3")
        buf.write("\2\2\2T\u0242\3\2\2\2V\u024c\3\2\2\2X\u0250\3\2\2\2Z\u0252")
        buf.write("\3\2\2\2\\\u025a\3\2\2\2^\u0261\3\2\2\2`\u0267\3\2\2\2")
        buf.write("b\u0269\3\2\2\2d\u026d\3\2\2\2f\u0270\3\2\2\2h\u0277\3")
        buf.write("\2\2\2j\u0281\3\2\2\2l\u0283\3\2\2\2n\u028c\3\2\2\2p\u029d")
        buf.write("\3\2\2\2r\u02a1\3\2\2\2t\u02a5\3\2\2\2v\u02a7\3\2\2\2")
        buf.write("x\u02a9\3\2\2\2z\u02ad\3\2\2\2|\u02af\3\2\2\2~\u02b1\3")
        buf.write("\2\2\2\u0080\u02b3\3\2\2\2\u0082\u02ba\3\2\2\2\u0084\u02c0")
        buf.write("\3\2\2\2\u0086\u02c2\3\2\2\2\u0088\u02c4\3\2\2\2\u008a")
        buf.write("\u02cd\3\2\2\2\u008c\u02d4\3\2\2\2\u008e\u02e0\3\2\2\2")
        buf.write("\u0090\u02e2\3\2\2\2\u0092\u02e6\3\2\2\2\u0094\u02ea\3")
        buf.write("\2\2\2\u0096\u02f3\3\2\2\2\u0098\u02f5\3\2\2\2\u009a\u02fb")
        buf.write("\3\2\2\2\u009c\u0303\3\2\2\2\u009e\u030b\3\2\2\2\u00a0")
        buf.write("\u0311\3\2\2\2\u00a2\u031b\3\2\2\2\u00a4\u031f\3\2\2\2")
        buf.write("\u00a6\u0322\3\2\2\2\u00a8\u032e\3\2\2\2\u00aa\u0330\3")
        buf.write("\2\2\2\u00ac\u0336\3\2\2\2\u00ae\u033c\3\2\2\2\u00b0\u0343")
        buf.write("\3\2\2\2\u00b2\u0353\3\2\2\2\u00b4\u0365\3\2\2\2\u00b6")
        buf.write("\u0367\3\2\2\2\u00b8\u0369\3\2\2\2\u00ba\u0371\3\2\2\2")
        buf.write("\u00bc\u0375\3\2\2\2\u00be\u0379\3\2\2\2\u00c0\u037d\3")
        buf.write("\2\2\2\u00c2\u0380\3\2\2\2\u00c4\u0391\3\2\2\2\u00c6\u0393")
        buf.write("\3\2\2\2\u00c8\u039b\3\2\2\2\u00ca\u039f\3\2\2\2\u00cc")
        buf.write("\u03a2\3\2\2\2\u00ce\u03a4\3\2\2\2\u00d0\u03a8\3\2\2\2")
        buf.write("\u00d2\u03aa\3\2\2\2\u00d4\u03b1\3\2\2\2\u00d6\u03b3\3")
        buf.write("\2\2\2\u00d8\u03bc\3\2\2\2\u00da\u03be\3\2\2\2\u00dc\u03c6")
        buf.write("\3\2\2\2\u00de\u03ce\3\2\2\2\u00e0\u03d0\3\2\2\2\u00e2")
        buf.write("\u03d8\3\2\2\2\u00e4\u03e0\3\2\2\2\u00e6\u03ee\3\2\2\2")
        buf.write("\u00e8\u03fe\3\2\2\2\u00ea\u040a\3\2\2\2\u00ec\u0414\3")
        buf.write("\2\2\2\u00ee\u042a\3\2\2\2\u00f0\u0433\3\2\2\2\u00f2\u0435")
        buf.write("\3\2\2\2\u00f4\u0438\3\2\2\2\u00f6\u0441\3\2\2\2\u00f8")
        buf.write("\u0443\3\2\2\2\u00fa\u0446\3\2\2\2\u00fc\u044b\3\2\2\2")
        buf.write("\u00fe\u045c\3\2\2\2\u0100\u0466\3\2\2\2\u0102\u046a\3")
        buf.write("\2\2\2\u0104\u0473\3\2\2\2\u0106\u0475\3\2\2\2\u0108\u047d")
        buf.write("\3\2\2\2\u010a\u0491\3\2\2\2\u010c\u0494\3\2\2\2\u010e")
        buf.write("\u0498\3\2\2\2\u0110\u049e\3\2\2\2\u0112\u04ac\3\2\2\2")
        buf.write("\u0114\u04ae\3\2\2\2\u0116\u04bb\3\2\2\2\u0118\u04bd\3")
        buf.write("\2\2\2\u011a\u04c4\3\2\2\2\u011c\u04cb\3\2\2\2\u011e\u04cd")
        buf.write("\3\2\2\2\u0120\u04db\3\2\2\2\u0122\u04e0\3\2\2\2\u0124")
        buf.write("\u04e2\3\2\2\2\u0126\u04e6\3\2\2\2\u0128\u04ea\3\2\2\2")
        buf.write("\u012a\u04ee\3\2\2\2\u012c\u04f1\3\2\2\2\u012e\u04f5\3")
        buf.write("\2\2\2\u0130\u0500\3\2\2\2\u0132\u0503\3\2\2\2\u0134\u0506")
        buf.write("\3\2\2\2\u0136\u050a\3\2\2\2\u0138\u050c\3\2\2\2\u013a")
        buf.write("\u050e\3\2\2\2\u013c\u0510\3\2\2\2\u013e\u0514\3\2\2\2")
        buf.write("\u0140\u0516\3\2\2\2\u0142\u0144\5\4\3\2\u0143\u0142\3")
        buf.write("\2\2\2\u0143\u0144\3\2\2\2\u0144\u0146\3\2\2\2\u0145\u0147")
        buf.write("\5\6\4\2\u0146\u0145\3\2\2\2\u0146\u0147\3\2\2\2\u0147")
        buf.write("\u0149\3\2\2\2\u0148\u014a\5\n\6\2\u0149\u0148\3\2\2\2")
        buf.write("\u0149\u014a\3\2\2\2\u014a\3\3\2\2\2\u014b\u014c\7\23")
        buf.write("\2\2\u014c\u014d\5\u0114\u008b\2\u014d\5\3\2\2\2\u014e")
        buf.write("\u014f\b\4\1\2\u014f\u0150\5\b\5\2\u0150\u0155\3\2\2\2")
        buf.write("\u0151\u0152\f\3\2\2\u0152\u0154\5\b\5\2\u0153\u0151\3")
        buf.write("\2\2\2\u0154\u0157\3\2\2\2\u0155\u0153\3\2\2\2\u0155\u0156")
        buf.write("\3\2\2\2\u0156\7\3\2\2\2\u0157\u0155\3\2\2\2\u0158\u0159")
        buf.write("\7\24\2\2\u0159\u0160\5\u0116\u008c\2\u015a\u015b\7\24")
        buf.write("\2\2\u015b\u015c\5\u0114\u008b\2\u015c\u015d\7P\2\2\u015d")
        buf.write("\u015e\78\2\2\u015e\u0160\3\2\2\2\u015f\u0158\3\2\2\2")
        buf.write("\u015f\u015a\3\2\2\2\u0160\t\3\2\2\2\u0161\u0163\5\f\7")
        buf.write("\2\u0162\u0161\3\2\2\2\u0163\u0164\3\2\2\2\u0164\u0162")
        buf.write("\3\2\2\2\u0164\u0165\3\2\2\2\u0165\13\3\2\2\2\u0166\u0169")
        buf.write("\5\16\b\2\u0167\u0169\5T+\2\u0168\u0166\3\2\2\2\u0168")
        buf.write("\u0167\3\2\2\2\u0169\r\3\2\2\2\u016a\u016c\5\20\t\2\u016b")
        buf.write("\u016a\3\2\2\2\u016b\u016c\3\2\2\2\u016c\u016d\3\2\2\2")
        buf.write("\u016d\u016e\7\30\2\2\u016e\u0170\7h\2\2\u016f\u0171\5")
        buf.write("\24\13\2\u0170\u016f\3\2\2\2\u0170\u0171\3\2\2\2\u0171")
        buf.write("\u0173\3\2\2\2\u0172\u0174\5\26\f\2\u0173\u0172\3\2\2")
        buf.write("\2\u0173\u0174\3\2\2\2\u0174\u0175\3\2\2\2\u0175\u0176")
        buf.write("\5\32\16\2\u0176\17\3\2\2\2\u0177\u017b\5\22\n\2\u0178")
        buf.write("\u017a\5\22\n\2\u0179\u0178\3\2\2\2\u017a\u017d\3\2\2")
        buf.write("\2\u017b\u0179\3\2\2\2\u017b\u017c\3\2\2\2\u017c\21\3")
        buf.write("\2\2\2\u017d\u017b\3\2\2\2\u017e\u017f\t\2\2\2\u017f\23")
        buf.write("\3\2\2\2\u0180\u0181\7\36\2\2\u0181\u0182\5|?\2\u0182")
        buf.write("\25\3\2\2\2\u0183\u0184\7\37\2\2\u0184\u0185\5\30\r\2")
        buf.write("\u0185\27\3\2\2\2\u0186\u018b\5~@\2\u0187\u0188\7Q\2\2")
        buf.write("\u0188\u018a\5~@\2\u0189\u0187\3\2\2\2\u018a\u018d\3\2")
        buf.write("\2\2\u018b\u0189\3\2\2\2\u018b\u018c\3\2\2\2\u018c\31")
        buf.write("\3\2\2\2\u018d\u018b\3\2\2\2\u018e\u0190\7L\2\2\u018f")
        buf.write("\u0191\5\34\17\2\u0190\u018f\3\2\2\2\u0190\u0191\3\2\2")
        buf.write("\2\u0191\u0192\3\2\2\2\u0192\u0193\7M\2\2\u0193\33\3\2")
        buf.write("\2\2\u0194\u0195\b\17\1\2\u0195\u0196\5\36\20\2\u0196")
        buf.write("\u019b\3\2\2\2\u0197\u0198\f\3\2\2\u0198\u019a\5\36\20")
        buf.write("\2\u0199\u0197\3\2\2\2\u019a\u019d\3\2\2\2\u019b\u0199")
        buf.write("\3\2\2\2\u019b\u019c\3\2\2\2\u019c\35\3\2\2\2\u019d\u019b")
        buf.write("\3\2\2\2\u019e\u01a2\5 \21\2\u019f\u01a2\5\"\22\2\u01a0")
        buf.write("\u01a2\5$\23\2\u01a1\u019e\3\2\2\2\u01a1\u019f\3\2\2\2")
        buf.write("\u01a1\u01a0\3\2\2\2\u01a2\37\3\2\2\2\u01a3\u01a6\58\35")
        buf.write("\2\u01a4\u01a6\5F$\2\u01a5\u01a3\3\2\2\2\u01a5\u01a4\3")
        buf.write("\2\2\2\u01a6!\3\2\2\2\u01a7\u01a8\7 \2\2\u01a8\u01a9\5")
        buf.write("\u0080A\2\u01a9#\3\2\2\2\u01aa\u01ac\5&\24\2\u01ab\u01aa")
        buf.write("\3\2\2\2\u01ab\u01ac\3\2\2\2\u01ac\u01ad\3\2\2\2\u01ad")
        buf.write("\u01af\5*\26\2\u01ae\u01b0\5\60\31\2\u01af\u01ae\3\2\2")
        buf.write("\2\u01af\u01b0\3\2\2\2\u01b0\u01b1\3\2\2\2\u01b1\u01b2")
        buf.write("\5\64\33\2\u01b2%\3\2\2\2\u01b3\u01b4\b\24\1\2\u01b4\u01b5")
        buf.write("\5(\25\2\u01b5\u01ba\3\2\2\2\u01b6\u01b7\f\3\2\2\u01b7")
        buf.write("\u01b9\5(\25\2\u01b8\u01b6\3\2\2\2\u01b9\u01bc\3\2\2\2")
        buf.write("\u01ba\u01b8\3\2\2\2\u01ba\u01bb\3\2\2\2\u01bb\'\3\2\2")
        buf.write("\2\u01bc\u01ba\3\2\2\2\u01bd\u01be\t\3\2\2\u01be)\3\2")
        buf.write("\2\2\u01bf\u01c0\7h\2\2\u01c0\u01c2\7N\2\2\u01c1\u01c3")
        buf.write("\5,\27\2\u01c2\u01c1\3\2\2\2\u01c2\u01c3\3\2\2\2\u01c3")
        buf.write("\u01c4\3\2\2\2\u01c4\u01c5\7O\2\2\u01c5+\3\2\2\2\u01c6")
        buf.write("\u01cb\5.\30\2\u01c7\u01c8\7Q\2\2\u01c8\u01ca\5.\30\2")
        buf.write("\u01c9\u01c7\3\2\2\2\u01ca\u01cd\3\2\2\2\u01cb\u01c9\3")
        buf.write("\2\2\2\u01cb\u01cc\3\2\2\2\u01cc-\3\2\2\2\u01cd\u01cb")
        buf.write("\3\2\2\2\u01ce\u01cf\5p9\2\u01cf\u01d0\5B\"\2\u01d0/\3")
        buf.write("\2\2\2\u01d1\u01d2\7&\2\2\u01d2\u01d3\5\62\32\2\u01d3")
        buf.write("\61\3\2\2\2\u01d4\u01d9\5|?\2\u01d5\u01d6\7Q\2\2\u01d6")
        buf.write("\u01d8\5|?\2\u01d7\u01d5\3\2\2\2\u01d8\u01db\3\2\2\2\u01d9")
        buf.write("\u01d7\3\2\2\2\u01d9\u01da\3\2\2\2\u01da\63\3\2\2\2\u01db")
        buf.write("\u01d9\3\2\2\2\u01dc\u01de\7L\2\2\u01dd\u01df\5\66\34")
        buf.write("\2\u01de\u01dd\3\2\2\2\u01de\u01df\3\2\2\2\u01df\u01e1")
        buf.write("\3\2\2\2\u01e0\u01e2\5\u0082B\2\u01e1\u01e0\3\2\2\2\u01e1")
        buf.write("\u01e2\3\2\2\2\u01e2\u01e3\3\2\2\2\u01e3\u01e4\7M\2\2")
        buf.write("\u01e4\65\3\2\2\2\u01e5\u01e6\7!\2\2\u01e6\u01e8\7N\2")
        buf.write("\2\u01e7\u01e9\5\u0108\u0085\2\u01e8\u01e7\3\2\2\2\u01e8")
        buf.write("\u01e9\3\2\2\2\u01e9\u01ea\3\2\2\2\u01ea\u01f2\7O\2\2")
        buf.write("\u01eb\u01ec\7\"\2\2\u01ec\u01ee\7N\2\2\u01ed\u01ef\5")
        buf.write("\u0108\u0085\2\u01ee\u01ed\3\2\2\2\u01ee\u01ef\3\2\2\2")
        buf.write("\u01ef\u01f0\3\2\2\2\u01f0\u01f2\7O\2\2\u01f1\u01e5\3")
        buf.write("\2\2\2\u01f1\u01eb\3\2\2\2\u01f2\67\3\2\2\2\u01f3\u01f5")
        buf.write("\5:\36\2\u01f4\u01f3\3\2\2\2\u01f4\u01f5\3\2\2\2\u01f5")
        buf.write("\u01f6\3\2\2\2\u01f6\u01f7\5p9\2\u01f7\u01f8\5> \2\u01f8")
        buf.write("9\3\2\2\2\u01f9\u01fb\5<\37\2\u01fa\u01f9\3\2\2\2\u01fb")
        buf.write("\u01fc\3\2\2\2\u01fc\u01fa\3\2\2\2\u01fc\u01fd\3\2\2\2")
        buf.write("\u01fd;\3\2\2\2\u01fe\u01ff\t\4\2\2\u01ff=\3\2\2\2\u0200")
        buf.write("\u0205\5@!\2\u0201\u0202\7Q\2\2\u0202\u0204\5@!\2\u0203")
        buf.write("\u0201\3\2\2\2\u0204\u0207\3\2\2\2\u0205\u0203\3\2\2\2")
        buf.write("\u0205\u0206\3\2\2\2\u0206?\3\2\2\2\u0207\u0205\3\2\2")
        buf.write("\2\u0208\u020e\5B\"\2\u0209\u020a\5B\"\2\u020a\u020b\7")
        buf.write("+\2\2\u020b\u020c\5D#\2\u020c\u020e\3\2\2\2\u020d\u0208")
        buf.write("\3\2\2\2\u020d\u0209\3\2\2\2\u020eA\3\2\2\2\u020f\u0214")
        buf.write("\7h\2\2\u0210\u0211\7J\2\2\u0211\u0213\7K\2\2\u0212\u0210")
        buf.write("\3\2\2\2\u0213\u0216\3\2\2\2\u0214\u0212\3\2\2\2\u0214")
        buf.write("\u0215\3\2\2\2\u0215C\3\2\2\2\u0216\u0214\3\2\2\2\u0217")
        buf.write("\u021a\5\u00ceh\2\u0218\u021a\5l\67\2\u0219\u0217\3\2")
        buf.write("\2\2\u0219\u0218\3\2\2\2\u021aE\3\2\2\2\u021b\u021c\5")
        buf.write("H%\2\u021c\u021d\5R*\2\u021dG\3\2\2\2\u021e\u0220\5L\'")
        buf.write("\2\u021f\u021e\3\2\2\2\u021f\u0220\3\2\2\2\u0220\u0221")
        buf.write("\3\2\2\2\u0221\u0222\5J&\2\u0222\u0224\5P)\2\u0223\u0225")
        buf.write("\5\60\31\2\u0224\u0223\3\2\2\2\u0224\u0225\3\2\2\2\u0225")
        buf.write("I\3\2\2\2\u0226\u0229\5p9\2\u0227\u0229\7\'\2\2\u0228")
        buf.write("\u0226\3\2\2\2\u0228\u0227\3\2\2\2\u0229K\3\2\2\2\u022a")
        buf.write("\u022b\b\'\1\2\u022b\u022c\5N(\2\u022c\u0231\3\2\2\2\u022d")
        buf.write("\u022e\f\3\2\2\u022e\u0230\5N(\2\u022f\u022d\3\2\2\2\u0230")
        buf.write("\u0233\3\2\2\2\u0231\u022f\3\2\2\2\u0231\u0232\3\2\2\2")
        buf.write("\u0232M\3\2\2\2\u0233\u0231\3\2\2\2\u0234\u0235\t\5\2")
        buf.write("\2\u0235O\3\2\2\2\u0236\u0237\7h\2\2\u0237\u0239\7N\2")
        buf.write("\2\u0238\u023a\5,\27\2\u0239\u0238\3\2\2\2\u0239\u023a")
        buf.write("\3\2\2\2\u023a\u023b\3\2\2\2\u023b\u023c\7O\2\2\u023c")
        buf.write("Q\3\2\2\2\u023d\u0240\5\u0080A\2\u023e\u0240\3\2\2\2\u023f")
        buf.write("\u023d\3\2\2\2\u023f\u023e\3\2\2\2\u0240S\3\2\2\2\u0241")
        buf.write("\u0243\5V,\2\u0242\u0241\3\2\2\2\u0242\u0243\3\2\2\2\u0243")
        buf.write("\u0244\3\2\2\2\u0244\u0245\7*\2\2\u0245\u0247\7h\2\2\u0246")
        buf.write("\u0248\5Z.\2\u0247\u0246\3\2\2\2\u0247\u0248\3\2\2\2\u0248")
        buf.write("\u0249\3\2\2\2\u0249\u024a\5\\/\2\u024aU\3\2\2\2\u024b")
        buf.write("\u024d\5X-\2\u024c\u024b\3\2\2\2\u024d\u024e\3\2\2\2\u024e")
        buf.write("\u024c\3\2\2\2\u024e\u024f\3\2\2\2\u024fW\3\2\2\2\u0250")
        buf.write("\u0251\t\6\2\2\u0251Y\3\2\2\2\u0252\u0253\7\36\2\2\u0253")
        buf.write("\u0256\5~@\2\u0254\u0255\7Q\2\2\u0255\u0257\5~@\2\u0256")
        buf.write("\u0254\3\2\2\2\u0257\u0258\3\2\2\2\u0258\u0256\3\2\2\2")
        buf.write("\u0258\u0259\3\2\2\2\u0259[\3\2\2\2\u025a\u025c\7L\2\2")
        buf.write("\u025b\u025d\5^\60\2\u025c\u025b\3\2\2\2\u025c\u025d\3")
        buf.write("\2\2\2\u025d\u025e\3\2\2\2\u025e\u025f\7M\2\2\u025f]\3")
        buf.write("\2\2\2\u0260\u0262\5`\61\2\u0261\u0260\3\2\2\2\u0262\u0263")
        buf.write("\3\2\2\2\u0263\u0261\3\2\2\2\u0263\u0264\3\2\2\2\u0264")
        buf.write("_\3\2\2\2\u0265\u0268\5b\62\2\u0266\u0268\5f\64\2\u0267")
        buf.write("\u0265\3\2\2\2\u0267\u0266\3\2\2\2\u0268a\3\2\2\2\u0269")
        buf.write("\u026a\5d\63\2\u026a\u026b\5p9\2\u026b\u026c\5@!\2\u026c")
        buf.write("c\3\2\2\2\u026d\u026e\t\7\2\2\u026ee\3\2\2\2\u026f\u0271")
        buf.write("\5h\65\2\u0270\u026f\3\2\2\2\u0270\u0271\3\2\2\2\u0271")
        buf.write("\u0272\3\2\2\2\u0272\u0273\5J&\2\u0273\u0275\5P)\2\u0274")
        buf.write("\u0276\5\60\31\2\u0275\u0274\3\2\2\2\u0275\u0276\3\2\2")
        buf.write("\2\u0276g\3\2\2\2\u0277\u0278\b\65\1\2\u0278\u0279\5j")
        buf.write("\66\2\u0279\u027e\3\2\2\2\u027a\u027b\f\3\2\2\u027b\u027d")
        buf.write("\5j\66\2\u027c\u027a\3\2\2\2\u027d\u0280\3\2\2\2\u027e")
        buf.write("\u027c\3\2\2\2\u027e\u027f\3\2\2\2\u027fi\3\2\2\2\u0280")
        buf.write("\u027e\3\2\2\2\u0281\u0282\t\6\2\2\u0282k\3\2\2\2\u0283")
        buf.write("\u0285\7L\2\2\u0284\u0286\5n8\2\u0285\u0284\3\2\2\2\u0285")
        buf.write("\u0286\3\2\2\2\u0286\u0288\3\2\2\2\u0287\u0289\7Q\2\2")
        buf.write("\u0288\u0287\3\2\2\2\u0288\u0289\3\2\2\2\u0289\u028a\3")
        buf.write("\2\2\2\u028a\u028b\7M\2\2\u028bm\3\2\2\2\u028c\u0291\5")
        buf.write("D#\2\u028d\u028e\7Q\2\2\u028e\u0290\5D#\2\u028f\u028d")
        buf.write("\3\2\2\2\u0290\u0293\3\2\2\2\u0291\u028f\3\2\2\2\u0291")
        buf.write("\u0292\3\2\2\2\u0292o\3\2\2\2\u0293\u0291\3\2\2\2\u0294")
        buf.write("\u029e\5r:\2\u0295\u029a\5x=\2\u0296\u0297\7J\2\2\u0297")
        buf.write("\u0299\7K\2\2\u0298\u0296\3\2\2\2\u0299\u029c\3\2\2\2")
        buf.write("\u029a\u0298\3\2\2\2\u029a\u029b\3\2\2\2\u029b\u029e\3")
        buf.write("\2\2\2\u029c\u029a\3\2\2\2\u029d\u0294\3\2\2\2\u029d\u0295")
        buf.write("\3\2\2\2\u029eq\3\2\2\2\u029f\u02a2\5t;\2\u02a0\u02a2")
        buf.write("\7\21\2\2\u02a1\u029f\3\2\2\2\u02a1\u02a0\3\2\2\2\u02a2")
        buf.write("s\3\2\2\2\u02a3\u02a6\5v<\2\u02a4\u02a6\7\20\2\2\u02a5")
        buf.write("\u02a3\3\2\2\2\u02a5\u02a4\3\2\2\2\u02a6u\3\2\2\2\u02a7")
        buf.write("\u02a8\t\b\2\2\u02a8w\3\2\2\2\u02a9\u02aa\5z>\2\u02aa")
        buf.write("y\3\2\2\2\u02ab\u02ae\5|?\2\u02ac\u02ae\5~@\2\u02ad\u02ab")
        buf.write("\3\2\2\2\u02ad\u02ac\3\2\2\2\u02ae{\3\2\2\2\u02af\u02b0")
        buf.write("\5\u0116\u008c\2\u02b0}\3\2\2\2\u02b1\u02b2\5\u0116\u008c")
        buf.write("\2\u02b2\177\3\2\2\2\u02b3\u02b5\7L\2\2\u02b4\u02b6\5")
        buf.write("\u0082B\2\u02b5\u02b4\3\2\2\2\u02b5\u02b6\3\2\2\2\u02b6")
        buf.write("\u02b7\3\2\2\2\u02b7\u02b8\7M\2\2\u02b8\u0081\3\2\2\2")
        buf.write("\u02b9\u02bb\5\u0084C\2\u02ba\u02b9\3\2\2\2\u02bb\u02bc")
        buf.write("\3\2\2\2\u02bc\u02ba\3\2\2\2\u02bc\u02bd\3\2\2\2\u02bd")
        buf.write("\u0083\3\2\2\2\u02be\u02c1\5\u0086D\2\u02bf\u02c1\5\u008a")
        buf.write("F\2\u02c0\u02be\3\2\2\2\u02c0\u02bf\3\2\2\2\u02c1\u0085")
        buf.write("\3\2\2\2\u02c2\u02c3\5\u0088E\2\u02c3\u0087\3\2\2\2\u02c4")
        buf.write("\u02c5\5p9\2\u02c5\u02c6\5> \2\u02c6\u0089\3\2\2\2\u02c7")
        buf.write("\u02ce\5\u008eH\2\u02c8\u02ce\5\u0090I\2\u02c9\u02ce\5")
        buf.write("\u0098M\2\u02ca\u02ce\5\u009aN\2\u02cb\u02ce\5\u00aaV")
        buf.write("\2\u02cc\u02ce\5\u00b0Y\2\u02cd\u02c7\3\2\2\2\u02cd\u02c8")
        buf.write("\3\2\2\2\u02cd\u02c9\3\2\2\2\u02cd\u02ca\3\2\2\2\u02cd")
        buf.write("\u02cb\3\2\2\2\u02cd\u02cc\3\2\2\2\u02ce\u008b\3\2\2\2")
        buf.write("\u02cf\u02d5\5\u008eH\2\u02d0\u02d5\5\u0092J\2\u02d1\u02d5")
        buf.write("\5\u009cO\2\u02d2\u02d5\5\u00acW\2\u02d3\u02d5\5\u00b2")
        buf.write("Z\2\u02d4\u02cf\3\2\2\2\u02d4\u02d0\3\2\2\2\u02d4\u02d1")
        buf.write("\3\2\2\2\u02d4\u02d2\3\2\2\2\u02d4\u02d3\3\2\2\2\u02d5")
        buf.write("\u008d\3\2\2\2\u02d6\u02e1\5\u0080A\2\u02d7\u02e1\5\u0094")
        buf.write("K\2\u02d8\u02e1\5\u009eP\2\u02d9\u02e1\5\u00aeX\2\u02da")
        buf.write("\u02e1\5\u00ba^\2\u02db\u02e1\5\u00bc_\2\u02dc\u02e1\5")
        buf.write("\u00be`\2\u02dd\u02e1\5\u00c2b\2\u02de\u02e1\5\u00c0a")
        buf.write("\2\u02df\u02e1\5\u00c4c\2\u02e0\u02d6\3\2\2\2\u02e0\u02d7")
        buf.write("\3\2\2\2\u02e0\u02d8\3\2\2\2\u02e0\u02d9\3\2\2\2\u02e0")
        buf.write("\u02da\3\2\2\2\u02e0\u02db\3\2\2\2\u02e0\u02dc\3\2\2\2")
        buf.write("\u02e0\u02dd\3\2\2\2\u02e0\u02de\3\2\2\2\u02e0\u02df\3")
        buf.write("\2\2\2\u02e1\u008f\3\2\2\2\u02e2\u02e3\7h\2\2\u02e3\u02e4")
        buf.write("\7T\2\2\u02e4\u02e5\5\u008aF\2\u02e5\u0091\3\2\2\2\u02e6")
        buf.write("\u02e7\7h\2\2\u02e7\u02e8\7T\2\2\u02e8\u02e9\5\u008cG")
        buf.write("\2\u02e9\u0093\3\2\2\2\u02ea\u02eb\5\u0096L\2\u02eb\u0095")
        buf.write("\3\2\2\2\u02ec\u02f4\5\u00d2j\2\u02ed\u02f4\5\u00f4{\2")
        buf.write("\u02ee\u02f4\5\u00fa~\2\u02ef\u02f4\5\u00f2z\2\u02f0\u02f4")
        buf.write("\5\u00f8}\2\u02f1\u02f4\5\u00fe\u0080\2\u02f2\u02f4\5")
        buf.write("\u0106\u0084\2\u02f3\u02ec\3\2\2\2\u02f3\u02ed\3\2\2\2")
        buf.write("\u02f3\u02ee\3\2\2\2\u02f3\u02ef\3\2\2\2\u02f3\u02f0\3")
        buf.write("\2\2\2\u02f3\u02f1\3\2\2\2\u02f3\u02f2\3\2\2\2\u02f4\u0097")
        buf.write("\3\2\2\2\u02f5\u02f6\7X\2\2\u02f6\u02f7\7N\2\2\u02f7\u02f8")
        buf.write("\5\u00ceh\2\u02f8\u02f9\7O\2\2\u02f9\u02fa\5\u008aF\2")
        buf.write("\u02fa\u0099\3\2\2\2\u02fb\u02fc\7X\2\2\u02fc\u02fd\7")
        buf.write("N\2\2\u02fd\u02fe\5\u00ceh\2\u02fe\u02ff\7O\2\2\u02ff")
        buf.write("\u0300\5\u008cG\2\u0300\u0301\7Y\2\2\u0301\u0302\5\u008a")
        buf.write("F\2\u0302\u009b\3\2\2\2\u0303\u0304\7X\2\2\u0304\u0305")
        buf.write("\7N\2\2\u0305\u0306\5\u00ceh\2\u0306\u0307\7O\2\2\u0307")
        buf.write("\u0308\5\u008cG\2\u0308\u0309\7Y\2\2\u0309\u030a\5\u008c")
        buf.write("G\2\u030a\u009d\3\2\2\2\u030b\u030c\7\\\2\2\u030c\u030d")
        buf.write("\7N\2\2\u030d\u030e\5\u00ceh\2\u030e\u030f\7O\2\2\u030f")
        buf.write("\u0310\5\u00a0Q\2\u0310\u009f\3\2\2\2\u0311\u0313\7L\2")
        buf.write("\2\u0312\u0314\5\u00a2R\2\u0313\u0312\3\2\2\2\u0313\u0314")
        buf.write("\3\2\2\2\u0314\u0316\3\2\2\2\u0315\u0317\5\u00a6T\2\u0316")
        buf.write("\u0315\3\2\2\2\u0316\u0317\3\2\2\2\u0317\u0318\3\2\2\2")
        buf.write("\u0318\u0319\7M\2\2\u0319\u00a1\3\2\2\2\u031a\u031c\5")
        buf.write("\u00a4S\2\u031b\u031a\3\2\2\2\u031c\u031d\3\2\2\2\u031d")
        buf.write("\u031b\3\2\2\2\u031d\u031e\3\2\2\2\u031e\u00a3\3\2\2\2")
        buf.write("\u031f\u0320\5\u00a6T\2\u0320\u0321\5\u0082B\2\u0321\u00a5")
        buf.write("\3\2\2\2\u0322\u0323\5\u00a8U\2\u0323\u00a7\3\2\2\2\u0324")
        buf.write("\u0325\7Z\2\2\u0325\u0326\5\u00ccg\2\u0326\u0327\7T\2")
        buf.write("\2\u0327\u0329\3\2\2\2\u0328\u0324\3\2\2\2\u0329\u032a")
        buf.write("\3\2\2\2\u032a\u0328\3\2\2\2\u032a\u032b\3\2\2\2\u032b")
        buf.write("\u032f\3\2\2\2\u032c\u032d\7[\2\2\u032d\u032f\7T\2\2\u032e")
        buf.write("\u0328\3\2\2\2\u032e\u032c\3\2\2\2\u032f\u00a9\3\2\2\2")
        buf.write("\u0330\u0331\7^\2\2\u0331\u0332\7N\2\2\u0332\u0333\5\u00ce")
        buf.write("h\2\u0333\u0334\7O\2\2\u0334\u0335\5\u008aF\2\u0335\u00ab")
        buf.write("\3\2\2\2\u0336\u0337\7^\2\2\u0337\u0338\7N\2\2\u0338\u0339")
        buf.write("\5\u00ceh\2\u0339\u033a\7O\2\2\u033a\u033b\5\u008cG\2")
        buf.write("\u033b\u00ad\3\2\2\2\u033c\u033d\7]\2\2\u033d\u033e\5")
        buf.write("\u008aF\2\u033e\u033f\7^\2\2\u033f\u0340\7N\2\2\u0340")
        buf.write("\u0341\5\u00ceh\2\u0341\u0342\7O\2\2\u0342\u00af\3\2\2")
        buf.write("\2\u0343\u0344\7_\2\2\u0344\u0346\7N\2\2\u0345\u0347\5")
        buf.write("\u00b4[\2\u0346\u0345\3\2\2\2\u0346\u0347\3\2\2\2\u0347")
        buf.write("\u0348\3\2\2\2\u0348\u034a\7V\2\2\u0349\u034b\5\u00ce")
        buf.write("h\2\u034a\u0349\3\2\2\2\u034a\u034b\3\2\2\2\u034b\u034c")
        buf.write("\3\2\2\2\u034c\u034e\7V\2\2\u034d\u034f\5\u00b6\\\2\u034e")
        buf.write("\u034d\3\2\2\2\u034e\u034f\3\2\2\2\u034f\u0350\3\2\2\2")
        buf.write("\u0350\u0351\7O\2\2\u0351\u0352\5\u008aF\2\u0352\u00b1")
        buf.write("\3\2\2\2\u0353\u0354\7_\2\2\u0354\u0356\7N\2\2\u0355\u0357")
        buf.write("\5\u00b4[\2\u0356\u0355\3\2\2\2\u0356\u0357\3\2\2\2\u0357")
        buf.write("\u0358\3\2\2\2\u0358\u035a\7V\2\2\u0359\u035b\5\u00ce")
        buf.write("h\2\u035a\u0359\3\2\2\2\u035a\u035b\3\2\2\2\u035b\u035c")
        buf.write("\3\2\2\2\u035c\u035e\7V\2\2\u035d\u035f\5\u00b6\\\2\u035e")
        buf.write("\u035d\3\2\2\2\u035e\u035f\3\2\2\2\u035f\u0360\3\2\2\2")
        buf.write("\u0360\u0361\7O\2\2\u0361\u0362\5\u008cG\2\u0362\u00b3")
        buf.write("\3\2\2\2\u0363\u0366\5\u00b8]\2\u0364\u0366\5\u0088E\2")
        buf.write("\u0365\u0363\3\2\2\2\u0365\u0364\3\2\2\2\u0366\u00b5\3")
        buf.write("\2\2\2\u0367\u0368\5\u00b8]\2\u0368\u00b7\3\2\2\2\u0369")
        buf.write("\u036e\5\u0096L\2\u036a\u036b\7Q\2\2\u036b\u036d\5\u0096")
        buf.write("L\2\u036c\u036a\3\2\2\2\u036d\u0370\3\2\2\2\u036e\u036c")
        buf.write("\3\2\2\2\u036e\u036f\3\2\2\2\u036f\u00b9\3\2\2\2\u0370")
        buf.write("\u036e\3\2\2\2\u0371\u0373\7`\2\2\u0372\u0374\7h\2\2\u0373")
        buf.write("\u0372\3\2\2\2\u0373\u0374\3\2\2\2\u0374\u00bb\3\2\2\2")
        buf.write("\u0375\u0377\7a\2\2\u0376\u0378\7h\2\2\u0377\u0376\3\2")
        buf.write("\2\2\u0377\u0378\3\2\2\2\u0378\u00bd\3\2\2\2\u0379\u037b")
        buf.write("\7b\2\2\u037a\u037c\5\u00ceh\2\u037b\u037a\3\2\2\2\u037b")
        buf.write("\u037c\3\2\2\2\u037c\u00bf\3\2\2\2\u037d\u037e\7%\2\2")
        buf.write("\u037e\u037f\5\u00ceh\2\u037f\u00c1\3\2\2\2\u0380\u0381")
        buf.write("\7j\2\2\u0381\u0382\7N\2\2\u0382\u0383\5\u00ceh\2\u0383")
        buf.write("\u0384\7O\2\2\u0384\u0385\5\u0080A\2\u0385\u00c3\3\2\2")
        buf.write("\2\u0386\u0387\7c\2\2\u0387\u0388\5\u0080A\2\u0388\u0389")
        buf.write("\5\u00c6d\2\u0389\u0392\3\2\2\2\u038a\u038b\7c\2\2\u038b")
        buf.write("\u038d\5\u0080A\2\u038c\u038e\5\u00c6d\2\u038d\u038c\3")
        buf.write("\2\2\2\u038d\u038e\3\2\2\2\u038e\u038f\3\2\2\2\u038f\u0390")
        buf.write("\5\u00caf\2\u0390\u0392\3\2\2\2\u0391\u0386\3\2\2\2\u0391")
        buf.write("\u038a\3\2\2\2\u0392\u00c5\3\2\2\2\u0393\u0394\5\u00c8")
        buf.write("e\2\u0394\u00c7\3\2\2\2\u0395\u0396\7d\2\2\u0396\u0397")
        buf.write("\7N\2\2\u0397\u0398\5.\30\2\u0398\u0399\7O\2\2\u0399\u039a")
        buf.write("\5\u0080A\2\u039a\u039c\3\2\2\2\u039b\u0395\3\2\2\2\u039c")
        buf.write("\u039d\3\2\2\2\u039d\u039b\3\2\2\2\u039d\u039e\3\2\2\2")
        buf.write("\u039e\u00c9\3\2\2\2\u039f\u03a0\7e\2\2\u03a0\u03a1\5")
        buf.write("\u0080A\2\u03a1\u00cb\3\2\2\2\u03a2\u03a3\5\u00ceh\2\u03a3")
        buf.write("\u00cd\3\2\2\2\u03a4\u03a5\5\u00d0i\2\u03a5\u00cf\3\2")
        buf.write("\2\2\u03a6\u03a9\5\u00d8m\2\u03a7\u03a9\5\u00d2j\2\u03a8")
        buf.write("\u03a6\3\2\2\2\u03a8\u03a7\3\2\2\2\u03a9\u00d1\3\2\2\2")
        buf.write("\u03aa\u03ab\5\u00d4k\2\u03ab\u03ac\5\u00d6l\2\u03ac\u03ad")
        buf.write("\5\u00d0i\2\u03ad\u00d3\3\2\2\2\u03ae\u03b2\5\u011a\u008e")
        buf.write("\2\u03af\u03b2\5\u0100\u0081\2\u03b0\u03b2\5\u0112\u008a")
        buf.write("\2\u03b1\u03ae\3\2\2\2\u03b1\u03af\3\2\2\2\u03b1\u03b0")
        buf.write("\3\2\2\2\u03b2\u00d5\3\2\2\2\u03b3\u03b4\t\t\2\2\u03b4")
        buf.write("\u00d7\3\2\2\2\u03b5\u03bd\5\u00dan\2\u03b6\u03b7\5\u00da")
        buf.write("n\2\u03b7\u03b8\7R\2\2\u03b8\u03b9\5\u00ceh\2\u03b9\u03ba")
        buf.write("\7T\2\2\u03ba\u03bb\5\u00d8m\2\u03bb\u03bd\3\2\2\2\u03bc")
        buf.write("\u03b5\3\2\2\2\u03bc\u03b6\3\2\2\2\u03bd\u00d9\3\2\2\2")
        buf.write("\u03be\u03c3\5\u00dco\2\u03bf\u03c0\7<\2\2\u03c0\u03c2")
        buf.write("\5\u00dco\2\u03c1\u03bf\3\2\2\2\u03c2\u03c5\3\2\2\2\u03c3")
        buf.write("\u03c1\3\2\2\2\u03c3\u03c4\3\2\2\2\u03c4\u00db\3\2\2\2")
        buf.write("\u03c5\u03c3\3\2\2\2\u03c6\u03cb\5\u00dep\2\u03c7\u03c8")
        buf.write("\7=\2\2\u03c8\u03ca\5\u00dep\2\u03c9\u03c7\3\2\2\2\u03ca")
        buf.write("\u03cd\3\2\2\2\u03cb\u03c9\3\2\2\2\u03cb\u03cc\3\2\2\2")
        buf.write("\u03cc\u00dd\3\2\2\2\u03cd\u03cb\3\2\2\2\u03ce\u03cf\5")
        buf.write("\u00e0q\2\u03cf\u00df\3\2\2\2\u03d0\u03d5\5\u00e2r\2\u03d1")
        buf.write("\u03d2\7E\2\2\u03d2\u03d4\5\u00e2r\2\u03d3\u03d1\3\2\2")
        buf.write("\2\u03d4\u03d7\3\2\2\2\u03d5\u03d3\3\2\2\2\u03d5\u03d6")
        buf.write("\3\2\2\2\u03d6\u00e1\3\2\2\2\u03d7\u03d5\3\2\2\2\u03d8")
        buf.write("\u03dd\5\u00e4s\2\u03d9\u03da\7C\2\2\u03da\u03dc\5\u00e4")
        buf.write("s\2\u03db\u03d9\3\2\2\2\u03dc\u03df\3\2\2\2\u03dd\u03db")
        buf.write("\3\2\2\2\u03dd\u03de\3\2\2\2\u03de\u00e3\3\2\2\2\u03df")
        buf.write("\u03dd\3\2\2\2\u03e0\u03e1\bs\1\2\u03e1\u03e2\5\u00e6")
        buf.write("t\2\u03e2\u03eb\3\2\2\2\u03e3\u03e4\f\4\2\2\u03e4\u03e5")
        buf.write("\7>\2\2\u03e5\u03ea\5\u00e6t\2\u03e6\u03e7\f\3\2\2\u03e7")
        buf.write("\u03e8\7F\2\2\u03e8\u03ea\5\u00e6t\2\u03e9\u03e3\3\2\2")
        buf.write("\2\u03e9\u03e6\3\2\2\2\u03ea\u03ed\3\2\2\2\u03eb\u03e9")
        buf.write("\3\2\2\2\u03eb\u03ec\3\2\2\2\u03ec\u00e5\3\2\2\2\u03ed")
        buf.write("\u03eb\3\2\2\2\u03ee\u03fb\5\u00e8u\2\u03ef\u03f0\7B\2")
        buf.write("\2\u03f0\u03fa\5\u00e8u\2\u03f1\u03f2\7A\2\2\u03f2\u03fa")
        buf.write("\5\u00e8u\2\u03f3\u03f4\7@\2\2\u03f4\u03fa\5\u00e8u\2")
        buf.write("\u03f5\u03f6\7?\2\2\u03f6\u03fa\5\u00e8u\2\u03f7\u03f8")
        buf.write("\7\26\2\2\u03f8\u03fa\5x=\2\u03f9\u03ef\3\2\2\2\u03f9")
        buf.write("\u03f1\3\2\2\2\u03f9\u03f3\3\2\2\2\u03f9\u03f5\3\2\2\2")
        buf.write("\u03f9\u03f7\3\2\2\2\u03fa\u03fd\3\2\2\2\u03fb\u03f9\3")
        buf.write("\2\2\2\u03fb\u03fc\3\2\2\2\u03fc\u00e7\3\2\2\2\u03fd\u03fb")
        buf.write("\3\2\2\2\u03fe\u0407\5\u00eav\2\u03ff\u0400\7H\2\2\u0400")
        buf.write("\u0406\5\u00eav\2\u0401\u0402\7G\2\2\u0402\u0406\5\u00ea")
        buf.write("v\2\u0403\u0404\7I\2\2\u0404\u0406\5\u00eav\2\u0405\u03ff")
        buf.write("\3\2\2\2\u0405\u0401\3\2\2\2\u0405\u0403\3\2\2\2\u0406")
        buf.write("\u0409\3\2\2\2\u0407\u0405\3\2\2\2\u0407\u0408\3\2\2\2")
        buf.write("\u0408\u00e9\3\2\2\2\u0409\u0407\3\2\2\2\u040a\u0411\5")
        buf.write("\u00ecw\2\u040b\u040c\7\66\2\2\u040c\u0410\5\u00ecw\2")
        buf.write("\u040d\u040e\7\67\2\2\u040e\u0410\5\u00ecw\2\u040f\u040b")
        buf.write("\3\2\2\2\u040f\u040d\3\2\2\2\u0410\u0413\3\2\2\2\u0411")
        buf.write("\u040f\3\2\2\2\u0411\u0412\3\2\2\2\u0412\u00eb\3\2\2\2")
        buf.write("\u0413\u0411\3\2\2\2\u0414\u041d\5\u00f0y\2\u0415\u0416")
        buf.write("\78\2\2\u0416\u041c\5\u00f0y\2\u0417\u0418\79\2\2\u0418")
        buf.write("\u041c\5\u00f0y\2\u0419\u041a\7k\2\2\u041a\u041c\5\u00f0")
        buf.write("y\2\u041b\u0415\3\2\2\2\u041b\u0417\3\2\2\2\u041b\u0419")
        buf.write("\3\2\2\2\u041c\u041f\3\2\2\2\u041d\u041b\3\2\2\2\u041d")
        buf.write("\u041e\3\2\2\2\u041e\u00ed\3\2\2\2\u041f\u041d\3\2\2\2")
        buf.write("\u0420\u0421\7N\2\2\u0421\u0422\5r:\2\u0422\u0423\7O\2")
        buf.write("\2\u0423\u0424\5\u00f0y\2\u0424\u042b\3\2\2\2\u0425\u0426")
        buf.write("\7N\2\2\u0426\u0427\5x=\2\u0427\u0428\7O\2\2\u0428\u0429")
        buf.write("\5\u00f6|\2\u0429\u042b\3\2\2\2\u042a\u0420\3\2\2\2\u042a")
        buf.write("\u0425\3\2\2\2\u042b\u00ef\3\2\2\2\u042c\u0434\5\u00f4")
        buf.write("{\2\u042d\u0434\5\u00f2z\2\u042e\u042f\7\66\2\2\u042f")
        buf.write("\u0434\5\u00f0y\2\u0430\u0431\7\67\2\2\u0431\u0434\5\u00f0")
        buf.write("y\2\u0432\u0434\5\u00f6|\2\u0433\u042c\3\2\2\2\u0433\u042d")
        buf.write("\3\2\2\2\u0433\u042e\3\2\2\2\u0433\u0430\3\2\2\2\u0433")
        buf.write("\u0432\3\2\2\2\u0434\u00f1\3\2\2\2\u0435\u0436\7;\2\2")
        buf.write("\u0436\u0437\5\u00f0y\2\u0437\u00f3\3\2\2\2\u0438\u0439")
        buf.write("\7:\2\2\u0439\u043a\5\u00f0y\2\u043a\u00f5\3\2\2\2\u043b")
        buf.write("\u0442\5\u00fc\177\2\u043c\u043d\7W\2\2\u043d\u0442\5")
        buf.write("\u00f0y\2\u043e\u043f\7S\2\2\u043f\u0442\5\u00f0y\2\u0440")
        buf.write("\u0442\5\u00eex\2\u0441\u043b\3\2\2\2\u0441\u043c\3\2")
        buf.write("\2\2\u0441\u043e\3\2\2\2\u0441\u0440\3\2\2\2\u0442\u00f7")
        buf.write("\3\2\2\2\u0443\u0444\5\u00fc\177\2\u0444\u0445\7;\2\2")
        buf.write("\u0445\u00f9\3\2\2\2\u0446\u0447\5\u00fc\177\2\u0447\u0448")
        buf.write("\7:\2\2\u0448\u00fb\3\2\2\2\u0449\u044c\5\u0102\u0082")
        buf.write("\2\u044a\u044c\5\u011a\u008e\2\u044b\u0449\3\2\2\2\u044b")
        buf.write("\u044a\3\2\2\2\u044c\u00fd\3\2\2\2\u044d\u044e\5\u011c")
        buf.write("\u008f\2\u044e\u0450\7N\2\2\u044f\u0451\5\u0108\u0085")
        buf.write("\2\u0450\u044f\3\2\2\2\u0450\u0451\3\2\2\2\u0451\u0452")
        buf.write("\3\2\2\2\u0452\u0453\7O\2\2\u0453\u045d\3\2\2\2\u0454")
        buf.write("\u0455\7\"\2\2\u0455\u0456\7P\2\2\u0456\u0457\7h\2\2\u0457")
        buf.write("\u0459\7N\2\2\u0458\u045a\5\u0108\u0085\2\u0459\u0458")
        buf.write("\3\2\2\2\u0459\u045a\3\2\2\2\u045a\u045b\3\2\2\2\u045b")
        buf.write("\u045d\7O\2\2\u045c\u044d\3\2\2\2\u045c\u0454\3\2\2\2")
        buf.write("\u045d\u00ff\3\2\2\2\u045e\u045f\5\u0102\u0082\2\u045f")
        buf.write("\u0460\7P\2\2\u0460\u0461\7h\2\2\u0461\u0467\3\2\2\2\u0462")
        buf.write("\u0463\5\24\13\2\u0463\u0464\7P\2\2\u0464\u0465\7h\2\2")
        buf.write("\u0465\u0467\3\2\2\2\u0466\u045e\3\2\2\2\u0466\u0462\3")
        buf.write("\2\2\2\u0467\u0101\3\2\2\2\u0468\u046b\5\u0104\u0083\2")
        buf.write("\u0469\u046b\5\u010a\u0086\2\u046a\u0468\3\2\2\2\u046a")
        buf.write("\u0469\3\2\2\2\u046b\u0103\3\2\2\2\u046c\u0474\5\u0120")
        buf.write("\u0091\2\u046d\u0474\7!\2\2\u046e\u046f\7N\2\2\u046f\u0470")
        buf.write("\5\u00ceh\2\u0470\u0471\7O\2\2\u0471\u0474\3\2\2\2\u0472")
        buf.write("\u0474\5\u0106\u0084\2\u0473\u046c\3\2\2\2\u0473\u046d")
        buf.write("\3\2\2\2\u0473\u046e\3\2\2\2\u0473\u0472\3\2\2\2\u0474")
        buf.write("\u0105\3\2\2\2\u0475\u0476\7\22\2\2\u0476\u0477\5|?\2")
        buf.write("\u0477\u0479\7N\2\2\u0478\u047a\5\u0108\u0085\2\u0479")
        buf.write("\u0478\3\2\2\2\u0479\u047a\3\2\2\2\u047a\u047b\3\2\2\2")
        buf.write("\u047b\u047c\7O\2\2\u047c\u0107\3\2\2\2\u047d\u0482\5")
        buf.write("\u00ceh\2\u047e\u047f\7Q\2\2\u047f\u0481\5\u00ceh\2\u0480")
        buf.write("\u047e\3\2\2\2\u0481\u0484\3\2\2\2\u0482\u0480\3\2\2\2")
        buf.write("\u0482\u0483\3\2\2\2\u0483\u0109\3\2\2\2\u0484\u0482\3")
        buf.write("\2\2\2\u0485\u0486\7\22\2\2\u0486\u0487\5r:\2\u0487\u0489")
        buf.write("\5\u010c\u0087\2\u0488\u048a\5\u0110\u0089\2\u0489\u0488")
        buf.write("\3\2\2\2\u0489\u048a\3\2\2\2\u048a\u0492\3\2\2\2\u048b")
        buf.write("\u048c\7\22\2\2\u048c\u048d\5z>\2\u048d\u048f\5\u010c")
        buf.write("\u0087\2\u048e\u0490\5\u0110\u0089\2\u048f\u048e\3\2\2")
        buf.write("\2\u048f\u0490\3\2\2\2\u0490\u0492\3\2\2\2\u0491\u0485")
        buf.write("\3\2\2\2\u0491\u048b\3\2\2\2\u0492\u010b\3\2\2\2\u0493")
        buf.write("\u0495\5\u010e\u0088\2\u0494\u0493\3\2\2\2\u0495\u0496")
        buf.write("\3\2\2\2\u0496\u0494\3\2\2\2\u0496\u0497\3\2\2\2\u0497")
        buf.write("\u010d\3\2\2\2\u0498\u0499\7J\2\2\u0499\u049a\5\u00ce")
        buf.write("h\2\u049a\u049b\7K\2\2\u049b\u010f\3\2\2\2\u049c\u049d")
        buf.write("\7J\2\2\u049d\u049f\7K\2\2\u049e\u049c\3\2\2\2\u049f\u04a0")
        buf.write("\3\2\2\2\u04a0\u049e\3\2\2\2\u04a0\u04a1\3\2\2\2\u04a1")
        buf.write("\u0111\3\2\2\2\u04a2\u04a3\5\u011a\u008e\2\u04a3\u04a4")
        buf.write("\7J\2\2\u04a4\u04a5\5\u00ceh\2\u04a5\u04a6\7K\2\2\u04a6")
        buf.write("\u04ad\3\2\2\2\u04a7\u04a8\5\u0104\u0083\2\u04a8\u04a9")
        buf.write("\7J\2\2\u04a9\u04aa\5\u00ceh\2\u04aa\u04ab\7K\2\2\u04ab")
        buf.write("\u04ad\3\2\2\2\u04ac\u04a2\3\2\2\2\u04ac\u04a7\3\2\2\2")
        buf.write("\u04ad\u0113\3\2\2\2\u04ae\u04b3\7h\2\2\u04af\u04b0\7")
        buf.write("P\2\2\u04b0\u04b2\7h\2\2\u04b1\u04af\3\2\2\2\u04b2\u04b5")
        buf.write("\3\2\2\2\u04b3\u04b1\3\2\2\2\u04b3\u04b4\3\2\2\2\u04b4")
        buf.write("\u0115\3\2\2\2\u04b5\u04b3\3\2\2\2\u04b6\u04bc\7h\2\2")
        buf.write("\u04b7\u04b8\5\u0114\u008b\2\u04b8\u04b9\7P\2\2\u04b9")
        buf.write("\u04ba\7h\2\2\u04ba\u04bc\3\2\2\2\u04bb\u04b6\3\2\2\2")
        buf.write("\u04bb\u04b7\3\2\2\2\u04bc\u0117\3\2\2\2\u04bd\u04be\7")
        buf.write("h\2\2\u04be\u0119\3\2\2\2\u04bf\u04c5\7h\2\2\u04c0\u04c1")
        buf.write("\5\u011e\u0090\2\u04c1\u04c2\7P\2\2\u04c2\u04c3\7h\2\2")
        buf.write("\u04c3\u04c5\3\2\2\2\u04c4\u04bf\3\2\2\2\u04c4\u04c0\3")
        buf.write("\2\2\2\u04c5\u011b\3\2\2\2\u04c6\u04cc\7h\2\2\u04c7\u04c8")
        buf.write("\5\u011e\u0090\2\u04c8\u04c9\7P\2\2\u04c9\u04ca\7h\2\2")
        buf.write("\u04ca\u04cc\3\2\2\2\u04cb\u04c6\3\2\2\2\u04cb\u04c7\3")
        buf.write("\2\2\2\u04cc\u011d\3\2\2\2\u04cd\u04d2\7h\2\2\u04ce\u04cf")
        buf.write("\7P\2\2\u04cf\u04d1\7h\2\2\u04d0\u04ce\3\2\2\2\u04d1\u04d4")
        buf.write("\3\2\2\2\u04d2\u04d0\3\2\2\2\u04d2\u04d3\3\2\2\2\u04d3")
        buf.write("\u011f\3\2\2\2\u04d4\u04d2\3\2\2\2\u04d5\u04dc\5\u0122")
        buf.write("\u0092\2\u04d6\u04dc\5\u012e\u0098\2\u04d7\u04dc\5\u013a")
        buf.write("\u009e\2\u04d8\u04dc\5\u013c\u009f\2\u04d9\u04dc\5\u013e")
        buf.write("\u00a0\2\u04da\u04dc\5\u0140\u00a1\2\u04db\u04d5\3\2\2")
        buf.write("\2\u04db\u04d6\3\2\2\2\u04db\u04d7\3\2\2\2\u04db\u04d8")
        buf.write("\3\2\2\2\u04db\u04d9\3\2\2\2\u04db\u04da\3\2\2\2\u04dc")
        buf.write("\u0121\3\2\2\2\u04dd\u04e1\5\u0124\u0093\2\u04de\u04e1")
        buf.write("\5\u0126\u0094\2\u04df\u04e1\5\u0128\u0095\2\u04e0\u04dd")
        buf.write("\3\2\2\2\u04e0\u04de\3\2\2\2\u04e0\u04df\3\2\2\2\u04e1")
        buf.write("\u0123\3\2\2\2\u04e2\u04e4\5\u012a\u0096\2\u04e3\u04e5")
        buf.write("\7\b\2\2\u04e4\u04e3\3\2\2\2\u04e4\u04e5\3\2\2\2\u04e5")
        buf.write("\u0125\3\2\2\2\u04e6\u04e8\7\5\2\2\u04e7\u04e9\7\b\2\2")
        buf.write("\u04e8\u04e7\3\2\2\2\u04e8\u04e9\3\2\2\2\u04e9\u0127\3")
        buf.write("\2\2\2\u04ea\u04ec\7\6\2\2\u04eb\u04ed\7\b\2\2\u04ec\u04eb")
        buf.write("\3\2\2\2\u04ec\u04ed\3\2\2\2\u04ed\u0129\3\2\2\2\u04ee")
        buf.write("\u04ef\7\7\2\2\u04ef\u012b\3\2\2\2\u04f0\u04f2\7l\2\2")
        buf.write("\u04f1\u04f0\3\2\2\2\u04f2\u04f3\3\2\2\2\u04f3\u04f1\3")
        buf.write("\2\2\2\u04f3\u04f4\3\2\2\2\u04f4\u012d\3\2\2\2\u04f5\u04f6")
        buf.write("\5\u012c\u0097\2\u04f6\u04f8\7P\2\2\u04f7\u04f9\5\u012c")
        buf.write("\u0097\2\u04f8\u04f7\3\2\2\2\u04f8\u04f9\3\2\2\2\u04f9")
        buf.write("\u04fb\3\2\2\2\u04fa\u04fc\5\u0130\u0099\2\u04fb\u04fa")
        buf.write("\3\2\2\2\u04fb\u04fc\3\2\2\2\u04fc\u04fe\3\2\2\2\u04fd")
        buf.write("\u04ff\5\u0138\u009d\2\u04fe\u04fd\3\2\2\2\u04fe\u04ff")
        buf.write("\3\2\2\2\u04ff\u012f\3\2\2\2\u0500\u0501\5\u0132\u009a")
        buf.write("\2\u0501\u0502\5\u0134\u009b\2\u0502\u0131\3\2\2\2\u0503")
        buf.write("\u0504\7\n\2\2\u0504\u0133\3\2\2\2\u0505\u0507\5\u0136")
        buf.write("\u009c\2\u0506\u0505\3\2\2\2\u0506\u0507\3\2\2\2\u0507")
        buf.write("\u0508\3\2\2\2\u0508\u0509\5\u012c\u0097\2\u0509\u0135")
        buf.write("\3\2\2\2\u050a\u050b\t\n\2\2\u050b\u0137\3\2\2\2\u050c")
        buf.write("\u050d\7m\2\2\u050d\u0139\3\2\2\2\u050e\u050f\7\21\2\2")
        buf.write("\u050f\u013b\3\2\2\2\u0510\u0511\7f\2\2\u0511\u0512\7")
        buf.write("n\2\2\u0512\u0513\7f\2\2\u0513\u013d\3\2\2\2\u0514\u0515")
        buf.write("\7g\2\2\u0515\u013f\3\2\2\2\u0516\u0517\7o\2\2\u0517\u0141")
        buf.write("\3\2\2\2\u0087\u0143\u0146\u0149\u0155\u015f\u0164\u0168")
        buf.write("\u016b\u0170\u0173\u017b\u018b\u0190\u019b\u01a1\u01a5")
        buf.write("\u01ab\u01af\u01ba\u01c2\u01cb\u01d9\u01de\u01e1\u01e8")
        buf.write("\u01ee\u01f1\u01f4\u01fc\u0205\u020d\u0214\u0219\u021f")
        buf.write("\u0224\u0228\u0231\u0239\u023f\u0242\u0247\u024e\u0258")
        buf.write("\u025c\u0263\u0267\u0270\u0275\u027e\u0285\u0288\u0291")
        buf.write("\u029a\u029d\u02a1\u02a5\u02ad\u02b5\u02bc\u02c0\u02cd")
        buf.write("\u02d4\u02e0\u02f3\u0313\u0316\u031d\u032a\u032e\u0346")
        buf.write("\u034a\u034e\u0356\u035a\u035e\u0365\u036e\u0373\u0377")
        buf.write("\u037b\u038d\u0391\u039d\u03a8\u03b1\u03bc\u03c3\u03cb")
        buf.write("\u03d5\u03dd\u03e9\u03eb\u03f9\u03fb\u0405\u0407\u040f")
        buf.write("\u0411\u041b\u041d\u042a\u0433\u0441\u044b\u0450\u0459")
        buf.write("\u045c\u0466\u046a\u0473\u0479\u0482\u0489\u048f\u0491")
        buf.write("\u0496\u04a0\u04ac\u04b3\u04bb\u04c4\u04cb\u04d2\u04db")
        buf.write("\u04e0\u04e4\u04e8\u04ec\u04f3\u04f8\u04fb\u04fe\u0506")
        return buf.getvalue()


class JavaParser ( Parser ):

    grammarFileName = "JavaParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'short'", "'byte'", "'int'", "'long'", 
                     "'char'", "<INVALID>", "'boolean'", "'new'", "'package'", 
                     "'import'", "'const'", "'instanceof'", "'goto'", "'class'", 
                     "'abstract'", "'final'", "'public'", "'private'", "'protected'", 
                     "'extends'", "'implements'", "'static'", "'this'", 
                     "'super'", "'transient'", "'volatile'", "'throw'", 
                     "'throws'", "'void'", "'synchronized'", "'native'", 
                     "'interface'", "'='", "'*='", "'/='", "'%='", "'+='", 
                     "'<<='", "'>>='", "'>>>='", "'&='", "'^='", "'|='", 
                     "'+'", "'-'", "'*'", "'/'", "'++'", "'--'", "'||'", 
                     "'&&'", "'=='", "'>='", "'<='", "'>'", "'<'", "'&'", 
                     "'|'", "'^'", "'!='", "'>>'", "'<<'", "'>>>'", "'['", 
                     "']'", "'{'", "'}'", "'('", "')'", "'.'", "','", "'?'", 
                     "'!'", "':'", "'@'", "';'", "'~'", "'if'", "'else'", 
                     "'case'", "'default'", "'switch'", "'do'", "'while'", 
                     "'for'", "'break'", "'continue'", "'return'", "'try'", 
                     "'catch'", "'finally'", "'''" ]

    symbolicNames = [ "<INVALID>", "ESPACO", "COMENTARIO", "HEX_NUMERAL", 
                      "OCTAL_NUMERAL", "NUMERO", "INTEGER_TYPE_SUFFIX", 
                      "FLOAT_s", "EXP", "SHORT", "BYTE", "INT", "LONG", 
                      "CHAR", "FLOAT", "LOGICAL", "NEW", "PACKAGE", "IMPORT", 
                      "CONST", "INSTANCEOF", "GOTO", "CLASS", "ABSTRACT", 
                      "FINAL", "PUBLIC", "PRIVATE", "PROTECTED", "EXTENDS", 
                      "IMPLEMENTS", "STATIC", "THIS", "SUPER", "TRANSIENT", 
                      "VOLATILE", "THROW", "THROWS", "VOID", "SYNCHNOZED", 
                      "NATIVE", "INTERFACE", "IGUAL_ATRIB", "MULT_ATRIB", 
                      "DIV_ATRIB", "MOD_ATRIB", "ADD_ATRIB", "BIT_LEFT_ATRIB", 
                      "BIT_RIGHT_ATRIB", "U_BIT_RIGHT_ATRIB", "AND_ATRIB", 
                      "XOR_ATRIB", "OR_ATRIB", "ADD", "SUB", "MULT", "DIV", 
                      "INC", "DEC", "OR", "AND", "IGUAL", "MAIOR_IGUAL", 
                      "MENOR_IGUAL", "MAIOR", "MENOR", "BITAND", "BITOR", 
                      "CARET", "DIF", "SHIFT_RIGHT", "SHIFT_LEFT", "U_SHIFT_RIGHT", 
                      "AC", "FC", "ACH", "FCH", "AP", "FP", "PONTO", "VIRGULA", 
                      "INTERROGACAO", "EXCLAMACAO", "DOIS_PONTOS", "ARROBA", 
                      "PONTOV", "NOT", "IF", "ELSE", "CASE", "DEFAULT", 
                      "SWITCH", "DO", "WHILE", "FOR", "BREAK", "CONTINUE", 
                      "RETURN", "TRY", "CATCH", "FINALLY", "ASPAS", "STRING", 
                      "ID", "ERRO", "SYNCHRONIZED", "MOD", "DIGITO", "FLOAT_S", 
                      "LETRA", "NULL" ]

    RULE_compilationUnit = 0
    RULE_packageDeclaration = 1
    RULE_importDeclarations = 2
    RULE_importDeclaration = 3
    RULE_typeDeclarations = 4
    RULE_typeDeclaration = 5
    RULE_classDeclaration = 6
    RULE_classModifiers = 7
    RULE_classModifier = 8
    RULE_superRule = 9
    RULE_interfaces = 10
    RULE_interfaceTypeList = 11
    RULE_classBody = 12
    RULE_classBodyDeclarations = 13
    RULE_classBodyDeclaration = 14
    RULE_classMemberDeclaration = 15
    RULE_staticInitializer = 16
    RULE_constructorDeclaration = 17
    RULE_constructorModifiers = 18
    RULE_constructorModifier = 19
    RULE_constructorDeclarator = 20
    RULE_formalParameterList = 21
    RULE_formalParameter = 22
    RULE_throwsRule = 23
    RULE_classTypeList = 24
    RULE_constructorBody = 25
    RULE_explicitConstructorInvocation = 26
    RULE_fieldDeclaration = 27
    RULE_fieldModifiers = 28
    RULE_fieldModifier = 29
    RULE_variableDeclarators = 30
    RULE_variableDeclarator = 31
    RULE_variableDeclaratorId = 32
    RULE_variableInitializer = 33
    RULE_methodDeclaration = 34
    RULE_methodHeader = 35
    RULE_resultType = 36
    RULE_methodModifiers = 37
    RULE_methodModifier = 38
    RULE_methodDeclarator = 39
    RULE_methodBody = 40
    RULE_interfaceDeclaration = 41
    RULE_interfaceModifiers = 42
    RULE_interfaceModifier = 43
    RULE_extendsInterfaces = 44
    RULE_interfaceBody = 45
    RULE_interfaceMemberDeclarations = 46
    RULE_interfaceMemberDeclaration = 47
    RULE_constantDeclaration = 48
    RULE_constantModifiers = 49
    RULE_abstractMethodDeclaration = 50
    RULE_abstractMethodModifiers = 51
    RULE_abstractMethodModifier = 52
    RULE_arrayInitializer = 53
    RULE_variableInitializers = 54
    RULE_type = 55
    RULE_primitiveType = 56
    RULE_numericType = 57
    RULE_integralType = 58
    RULE_referenceType = 59
    RULE_classOrInterfaceType = 60
    RULE_classType = 61
    RULE_interfaceType = 62
    RULE_block = 63
    RULE_blockStatements = 64
    RULE_blockStatement = 65
    RULE_localVariableDeclarationStatement = 66
    RULE_localVariableDeclaration = 67
    RULE_statement = 68
    RULE_statementNoShortIf = 69
    RULE_statementWithoutTrailingSubstatement = 70
    RULE_labeledStatement = 71
    RULE_labeledStatementNoShortIf = 72
    RULE_expressionStatement = 73
    RULE_statementExpression = 74
    RULE_ifThenStatement = 75
    RULE_ifThenElseStatement = 76
    RULE_ifThenElseStatementNoShortIf = 77
    RULE_switchStatement = 78
    RULE_switchBlock = 79
    RULE_switchBlockStatementGroups = 80
    RULE_switchBlockStatementGroup = 81
    RULE_switchLabels = 82
    RULE_switchLabel = 83
    RULE_whileStatement = 84
    RULE_whileStatementNoShortIf = 85
    RULE_doStatement = 86
    RULE_forStatement = 87
    RULE_forStatementNoShortIf = 88
    RULE_forInit = 89
    RULE_forUpdate = 90
    RULE_statementExpressionList = 91
    RULE_breakStatement = 92
    RULE_continueStatement = 93
    RULE_returnStatement = 94
    RULE_throwsRuleStatement = 95
    RULE_synchronizedStatement = 96
    RULE_tryStatement = 97
    RULE_catches = 98
    RULE_catchClause = 99
    RULE_finallyRule = 100
    RULE_constantExpression = 101
    RULE_expression = 102
    RULE_assignmentExpression = 103
    RULE_assignment = 104
    RULE_leftHandSide = 105
    RULE_assignmentOperator = 106
    RULE_conditionalExpression = 107
    RULE_conditionalOrExpression = 108
    RULE_conditionalAndExpression = 109
    RULE_inclusiveOrExpression = 110
    RULE_exclusiveOrExpression = 111
    RULE_andExpression = 112
    RULE_equalityExpression = 113
    RULE_relationalExpression = 114
    RULE_shiftExpression = 115
    RULE_additiveExpression = 116
    RULE_multiplicativeExpression = 117
    RULE_castExpression = 118
    RULE_unaryExpression = 119
    RULE_preDecrementExpression = 120
    RULE_preIncrementExpression = 121
    RULE_unaryExpressionNotPlusMinus = 122
    RULE_postdecrementExpression = 123
    RULE_postincrementExpression = 124
    RULE_postfixExpression = 125
    RULE_methodInvocation = 126
    RULE_fieldAccess = 127
    RULE_primary = 128
    RULE_primaryNoNewArray = 129
    RULE_classInstanceCreationExpression = 130
    RULE_argumentlist = 131
    RULE_arrayCreationExpression = 132
    RULE_dimExprs = 133
    RULE_dimExpr = 134
    RULE_dims = 135
    RULE_arrayAccess = 136
    RULE_packageName = 137
    RULE_typeName = 138
    RULE_simpleTypeName = 139
    RULE_expressionName = 140
    RULE_methodName = 141
    RULE_ambiguousName = 142
    RULE_literal = 143
    RULE_integerLiteral = 144
    RULE_decimalIntegerLiteral = 145
    RULE_hexIntegerLiteral = 146
    RULE_octalIntegerLiteral = 147
    RULE_decimalNumeral = 148
    RULE_digits = 149
    RULE_floatingPointLiteral = 150
    RULE_exponentPart = 151
    RULE_exponentIndicator = 152
    RULE_signedInteger = 153
    RULE_sign = 154
    RULE_floatTypeSuffix = 155
    RULE_booleanLiteral = 156
    RULE_characterLiteral = 157
    RULE_stringLiteral = 158
    RULE_nullLiteral = 159

    ruleNames =  [ "compilationUnit", "packageDeclaration", "importDeclarations", 
                   "importDeclaration", "typeDeclarations", "typeDeclaration", 
                   "classDeclaration", "classModifiers", "classModifier", 
                   "superRule", "interfaces", "interfaceTypeList", "classBody", 
                   "classBodyDeclarations", "classBodyDeclaration", "classMemberDeclaration", 
                   "staticInitializer", "constructorDeclaration", "constructorModifiers", 
                   "constructorModifier", "constructorDeclarator", "formalParameterList", 
                   "formalParameter", "throwsRule", "classTypeList", "constructorBody", 
                   "explicitConstructorInvocation", "fieldDeclaration", 
                   "fieldModifiers", "fieldModifier", "variableDeclarators", 
                   "variableDeclarator", "variableDeclaratorId", "variableInitializer", 
                   "methodDeclaration", "methodHeader", "resultType", "methodModifiers", 
                   "methodModifier", "methodDeclarator", "methodBody", "interfaceDeclaration", 
                   "interfaceModifiers", "interfaceModifier", "extendsInterfaces", 
                   "interfaceBody", "interfaceMemberDeclarations", "interfaceMemberDeclaration", 
                   "constantDeclaration", "constantModifiers", "abstractMethodDeclaration", 
                   "abstractMethodModifiers", "abstractMethodModifier", 
                   "arrayInitializer", "variableInitializers", "type", "primitiveType", 
                   "numericType", "integralType", "referenceType", "classOrInterfaceType", 
                   "classType", "interfaceType", "block", "blockStatements", 
                   "blockStatement", "localVariableDeclarationStatement", 
                   "localVariableDeclaration", "statement", "statementNoShortIf", 
                   "statementWithoutTrailingSubstatement", "labeledStatement", 
                   "labeledStatementNoShortIf", "expressionStatement", "statementExpression", 
                   "ifThenStatement", "ifThenElseStatement", "ifThenElseStatementNoShortIf", 
                   "switchStatement", "switchBlock", "switchBlockStatementGroups", 
                   "switchBlockStatementGroup", "switchLabels", "switchLabel", 
                   "whileStatement", "whileStatementNoShortIf", "doStatement", 
                   "forStatement", "forStatementNoShortIf", "forInit", "forUpdate", 
                   "statementExpressionList", "breakStatement", "continueStatement", 
                   "returnStatement", "throwsRuleStatement", "synchronizedStatement", 
                   "tryStatement", "catches", "catchClause", "finallyRule", 
                   "constantExpression", "expression", "assignmentExpression", 
                   "assignment", "leftHandSide", "assignmentOperator", "conditionalExpression", 
                   "conditionalOrExpression", "conditionalAndExpression", 
                   "inclusiveOrExpression", "exclusiveOrExpression", "andExpression", 
                   "equalityExpression", "relationalExpression", "shiftExpression", 
                   "additiveExpression", "multiplicativeExpression", "castExpression", 
                   "unaryExpression", "preDecrementExpression", "preIncrementExpression", 
                   "unaryExpressionNotPlusMinus", "postdecrementExpression", 
                   "postincrementExpression", "postfixExpression", "methodInvocation", 
                   "fieldAccess", "primary", "primaryNoNewArray", "classInstanceCreationExpression", 
                   "argumentlist", "arrayCreationExpression", "dimExprs", 
                   "dimExpr", "dims", "arrayAccess", "packageName", "typeName", 
                   "simpleTypeName", "expressionName", "methodName", "ambiguousName", 
                   "literal", "integerLiteral", "decimalIntegerLiteral", 
                   "hexIntegerLiteral", "octalIntegerLiteral", "decimalNumeral", 
                   "digits", "floatingPointLiteral", "exponentPart", "exponentIndicator", 
                   "signedInteger", "sign", "floatTypeSuffix", "booleanLiteral", 
                   "characterLiteral", "stringLiteral", "nullLiteral" ]

    EOF = Token.EOF
    ESPACO=1
    COMENTARIO=2
    HEX_NUMERAL=3
    OCTAL_NUMERAL=4
    NUMERO=5
    INTEGER_TYPE_SUFFIX=6
    FLOAT_s=7
    EXP=8
    SHORT=9
    BYTE=10
    INT=11
    LONG=12
    CHAR=13
    FLOAT=14
    LOGICAL=15
    NEW=16
    PACKAGE=17
    IMPORT=18
    CONST=19
    INSTANCEOF=20
    GOTO=21
    CLASS=22
    ABSTRACT=23
    FINAL=24
    PUBLIC=25
    PRIVATE=26
    PROTECTED=27
    EXTENDS=28
    IMPLEMENTS=29
    STATIC=30
    THIS=31
    SUPER=32
    TRANSIENT=33
    VOLATILE=34
    THROW=35
    THROWS=36
    VOID=37
    SYNCHNOZED=38
    NATIVE=39
    INTERFACE=40
    IGUAL_ATRIB=41
    MULT_ATRIB=42
    DIV_ATRIB=43
    MOD_ATRIB=44
    ADD_ATRIB=45
    BIT_LEFT_ATRIB=46
    BIT_RIGHT_ATRIB=47
    U_BIT_RIGHT_ATRIB=48
    AND_ATRIB=49
    XOR_ATRIB=50
    OR_ATRIB=51
    ADD=52
    SUB=53
    MULT=54
    DIV=55
    INC=56
    DEC=57
    OR=58
    AND=59
    IGUAL=60
    MAIOR_IGUAL=61
    MENOR_IGUAL=62
    MAIOR=63
    MENOR=64
    BITAND=65
    BITOR=66
    CARET=67
    DIF=68
    SHIFT_RIGHT=69
    SHIFT_LEFT=70
    U_SHIFT_RIGHT=71
    AC=72
    FC=73
    ACH=74
    FCH=75
    AP=76
    FP=77
    PONTO=78
    VIRGULA=79
    INTERROGACAO=80
    EXCLAMACAO=81
    DOIS_PONTOS=82
    ARROBA=83
    PONTOV=84
    NOT=85
    IF=86
    ELSE=87
    CASE=88
    DEFAULT=89
    SWITCH=90
    DO=91
    WHILE=92
    FOR=93
    BREAK=94
    CONTINUE=95
    RETURN=96
    TRY=97
    CATCH=98
    FINALLY=99
    ASPAS=100
    STRING=101
    ID=102
    ERRO=103
    SYNCHRONIZED=104
    MOD=105
    DIGITO=106
    FLOAT_S=107
    LETRA=108
    NULL=109

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class CompilationUnitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def packageDeclaration(self):
            return self.getTypedRuleContext(JavaParser.PackageDeclarationContext,0)


        def importDeclarations(self):
            return self.getTypedRuleContext(JavaParser.ImportDeclarationsContext,0)


        def typeDeclarations(self):
            return self.getTypedRuleContext(JavaParser.TypeDeclarationsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_compilationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilationUnit" ):
                listener.enterCompilationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilationUnit" ):
                listener.exitCompilationUnit(self)




    def compilationUnit(self):

        localctx = JavaParser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_compilationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.PACKAGE:
                self.state = 320
                self.packageDeclaration()


            self.state = 324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.IMPORT:
                self.state = 323
                self.importDeclarations(0)


            self.state = 327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.CLASS) | (1 << JavaParser.ABSTRACT) | (1 << JavaParser.FINAL) | (1 << JavaParser.PUBLIC) | (1 << JavaParser.INTERFACE))) != 0):
                self.state = 326
                self.typeDeclarations()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PackageDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PACKAGE(self):
            return self.getToken(JavaParser.PACKAGE, 0)

        def packageName(self):
            return self.getTypedRuleContext(JavaParser.PackageNameContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_packageDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackageDeclaration" ):
                listener.enterPackageDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackageDeclaration" ):
                listener.exitPackageDeclaration(self)




    def packageDeclaration(self):

        localctx = JavaParser.PackageDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_packageDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 329
            self.match(JavaParser.PACKAGE)
            self.state = 330
            self.packageName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportDeclarationsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ImportDeclarationContext,0)


        def importDeclarations(self):
            return self.getTypedRuleContext(JavaParser.ImportDeclarationsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_importDeclarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDeclarations" ):
                listener.enterImportDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDeclarations" ):
                listener.exitImportDeclarations(self)



    def importDeclarations(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JavaParser.ImportDeclarationsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 4
        self.enterRecursionRule(localctx, 4, self.RULE_importDeclarations, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 333
            self.importDeclaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 339
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = JavaParser.ImportDeclarationsContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_importDeclarations)
                    self.state = 335
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 336
                    self.importDeclaration() 
                self.state = 341
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ImportDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(JavaParser.IMPORT, 0)

        def typeName(self):
            return self.getTypedRuleContext(JavaParser.TypeNameContext,0)


        def packageName(self):
            return self.getTypedRuleContext(JavaParser.PackageNameContext,0)


        def PONTO(self):
            return self.getToken(JavaParser.PONTO, 0)

        def MULT(self):
            return self.getToken(JavaParser.MULT, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_importDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDeclaration" ):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDeclaration" ):
                listener.exitImportDeclaration(self)




    def importDeclaration(self):

        localctx = JavaParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_importDeclaration)
        try:
            self.state = 349
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 342
                self.match(JavaParser.IMPORT)
                self.state = 343
                self.typeName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 344
                self.match(JavaParser.IMPORT)
                self.state = 345
                self.packageName()
                self.state = 346
                self.match(JavaParser.PONTO)
                self.state = 347
                self.match(JavaParser.MULT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeDeclarationsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_typeDeclarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDeclarations" ):
                listener.enterTypeDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDeclarations" ):
                listener.exitTypeDeclarations(self)




    def typeDeclarations(self):

        localctx = JavaParser.TypeDeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_typeDeclarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 351
                self.typeDeclaration()
                self.state = 354 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.CLASS) | (1 << JavaParser.ABSTRACT) | (1 << JavaParser.FINAL) | (1 << JavaParser.PUBLIC) | (1 << JavaParser.INTERFACE))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_typeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDeclaration" ):
                listener.enterTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDeclaration" ):
                listener.exitTypeDeclaration(self)




    def typeDeclaration(self):

        localctx = JavaParser.TypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_typeDeclaration)
        try:
            self.state = 358
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 356
                self.classDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 357
                self.interfaceDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(JavaParser.CLASS, 0)

        def ID(self):
            return self.getToken(JavaParser.ID, 0)

        def classBody(self):
            return self.getTypedRuleContext(JavaParser.ClassBodyContext,0)


        def classModifiers(self):
            return self.getTypedRuleContext(JavaParser.ClassModifiersContext,0)


        def superRule(self):
            return self.getTypedRuleContext(JavaParser.SuperRuleContext,0)


        def interfaces(self):
            return self.getTypedRuleContext(JavaParser.InterfacesContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_classDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDeclaration" ):
                listener.enterClassDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDeclaration" ):
                listener.exitClassDeclaration(self)




    def classDeclaration(self):

        localctx = JavaParser.ClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_classDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.ABSTRACT) | (1 << JavaParser.FINAL) | (1 << JavaParser.PUBLIC))) != 0):
                self.state = 360
                self.classModifiers()


            self.state = 363
            self.match(JavaParser.CLASS)
            self.state = 364
            self.match(JavaParser.ID)
            self.state = 366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.EXTENDS:
                self.state = 365
                self.superRule()


            self.state = 369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.IMPLEMENTS:
                self.state = 368
                self.interfaces()


            self.state = 371
            self.classBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassModifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ClassModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_classModifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassModifiers" ):
                listener.enterClassModifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassModifiers" ):
                listener.exitClassModifiers(self)




    def classModifiers(self):

        localctx = JavaParser.ClassModifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_classModifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            self.classModifier()
            self.state = 377
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.ABSTRACT) | (1 << JavaParser.FINAL) | (1 << JavaParser.PUBLIC))) != 0):
                self.state = 374
                self.classModifier()
                self.state = 379
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUBLIC(self):
            return self.getToken(JavaParser.PUBLIC, 0)

        def ABSTRACT(self):
            return self.getToken(JavaParser.ABSTRACT, 0)

        def FINAL(self):
            return self.getToken(JavaParser.FINAL, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_classModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassModifier" ):
                listener.enterClassModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassModifier" ):
                listener.exitClassModifier(self)




    def classModifier(self):

        localctx = JavaParser.ClassModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_classModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 380
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.ABSTRACT) | (1 << JavaParser.FINAL) | (1 << JavaParser.PUBLIC))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SuperRuleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTENDS(self):
            return self.getToken(JavaParser.EXTENDS, 0)

        def classType(self):
            return self.getTypedRuleContext(JavaParser.ClassTypeContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_superRule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuperRule" ):
                listener.enterSuperRule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuperRule" ):
                listener.exitSuperRule(self)




    def superRule(self):

        localctx = JavaParser.SuperRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_superRule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            self.match(JavaParser.EXTENDS)
            self.state = 383
            self.classType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfacesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPLEMENTS(self):
            return self.getToken(JavaParser.IMPLEMENTS, 0)

        def interfaceTypeList(self):
            return self.getTypedRuleContext(JavaParser.InterfaceTypeListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_interfaces

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaces" ):
                listener.enterInterfaces(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaces" ):
                listener.exitInterfaces(self)




    def interfaces(self):

        localctx = JavaParser.InterfacesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_interfaces)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 385
            self.match(JavaParser.IMPLEMENTS)
            self.state = 386
            self.interfaceTypeList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceTypeListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interfaceType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.InterfaceTypeContext)
            else:
                return self.getTypedRuleContext(JavaParser.InterfaceTypeContext,i)


        def VIRGULA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.VIRGULA)
            else:
                return self.getToken(JavaParser.VIRGULA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_interfaceTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceTypeList" ):
                listener.enterInterfaceTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceTypeList" ):
                listener.exitInterfaceTypeList(self)




    def interfaceTypeList(self):

        localctx = JavaParser.InterfaceTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_interfaceTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 388
            self.interfaceType()
            self.state = 393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParser.VIRGULA:
                self.state = 389
                self.match(JavaParser.VIRGULA)
                self.state = 390
                self.interfaceType()
                self.state = 395
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACH(self):
            return self.getToken(JavaParser.ACH, 0)

        def FCH(self):
            return self.getToken(JavaParser.FCH, 0)

        def classBodyDeclarations(self):
            return self.getTypedRuleContext(JavaParser.ClassBodyDeclarationsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_classBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBody" ):
                listener.enterClassBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBody" ):
                listener.exitClassBody(self)




    def classBody(self):

        localctx = JavaParser.ClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_classBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 396
            self.match(JavaParser.ACH)
            self.state = 398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.SHORT) | (1 << JavaParser.BYTE) | (1 << JavaParser.INT) | (1 << JavaParser.LONG) | (1 << JavaParser.CHAR) | (1 << JavaParser.FLOAT) | (1 << JavaParser.LOGICAL) | (1 << JavaParser.ABSTRACT) | (1 << JavaParser.FINAL) | (1 << JavaParser.PUBLIC) | (1 << JavaParser.PRIVATE) | (1 << JavaParser.PROTECTED) | (1 << JavaParser.STATIC) | (1 << JavaParser.TRANSIENT) | (1 << JavaParser.VOLATILE) | (1 << JavaParser.VOID) | (1 << JavaParser.NATIVE))) != 0) or _la==JavaParser.ID or _la==JavaParser.SYNCHRONIZED:
                self.state = 397
                self.classBodyDeclarations(0)


            self.state = 400
            self.match(JavaParser.FCH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassBodyDeclarationsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classBodyDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassBodyDeclarationContext,0)


        def classBodyDeclarations(self):
            return self.getTypedRuleContext(JavaParser.ClassBodyDeclarationsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_classBodyDeclarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBodyDeclarations" ):
                listener.enterClassBodyDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBodyDeclarations" ):
                listener.exitClassBodyDeclarations(self)



    def classBodyDeclarations(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JavaParser.ClassBodyDeclarationsContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 26
        self.enterRecursionRule(localctx, 26, self.RULE_classBodyDeclarations, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 403
            self.classBodyDeclaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 409
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,13,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = JavaParser.ClassBodyDeclarationsContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_classBodyDeclarations)
                    self.state = 405
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 406
                    self.classBodyDeclaration() 
                self.state = 411
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ClassBodyDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classMemberDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassMemberDeclarationContext,0)


        def staticInitializer(self):
            return self.getTypedRuleContext(JavaParser.StaticInitializerContext,0)


        def constructorDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ConstructorDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_classBodyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBodyDeclaration" ):
                listener.enterClassBodyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBodyDeclaration" ):
                listener.exitClassBodyDeclaration(self)




    def classBodyDeclaration(self):

        localctx = JavaParser.ClassBodyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_classBodyDeclaration)
        try:
            self.state = 415
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 412
                self.classMemberDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 413
                self.staticInitializer()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 414
                self.constructorDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassMemberDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldDeclaration(self):
            return self.getTypedRuleContext(JavaParser.FieldDeclarationContext,0)


        def methodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.MethodDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_classMemberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassMemberDeclaration" ):
                listener.enterClassMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassMemberDeclaration" ):
                listener.exitClassMemberDeclaration(self)




    def classMemberDeclaration(self):

        localctx = JavaParser.ClassMemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_classMemberDeclaration)
        try:
            self.state = 419
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 417
                self.fieldDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 418
                self.methodDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StaticInitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_staticInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticInitializer" ):
                listener.enterStaticInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticInitializer" ):
                listener.exitStaticInitializer(self)




    def staticInitializer(self):

        localctx = JavaParser.StaticInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_staticInitializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            self.match(JavaParser.STATIC)
            self.state = 422
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstructorDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constructorDeclarator(self):
            return self.getTypedRuleContext(JavaParser.ConstructorDeclaratorContext,0)


        def constructorBody(self):
            return self.getTypedRuleContext(JavaParser.ConstructorBodyContext,0)


        def constructorModifiers(self):
            return self.getTypedRuleContext(JavaParser.ConstructorModifiersContext,0)


        def throwsRule(self):
            return self.getTypedRuleContext(JavaParser.ThrowsRuleContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_constructorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDeclaration" ):
                listener.enterConstructorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDeclaration" ):
                listener.exitConstructorDeclaration(self)




    def constructorDeclaration(self):

        localctx = JavaParser.ConstructorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_constructorDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.PUBLIC) | (1 << JavaParser.PRIVATE) | (1 << JavaParser.PROTECTED))) != 0):
                self.state = 424
                self.constructorModifiers(0)


            self.state = 427
            self.constructorDeclarator()
            self.state = 429
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.THROWS:
                self.state = 428
                self.throwsRule()


            self.state = 431
            self.constructorBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstructorModifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constructorModifier(self):
            return self.getTypedRuleContext(JavaParser.ConstructorModifierContext,0)


        def constructorModifiers(self):
            return self.getTypedRuleContext(JavaParser.ConstructorModifiersContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_constructorModifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorModifiers" ):
                listener.enterConstructorModifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorModifiers" ):
                listener.exitConstructorModifiers(self)



    def constructorModifiers(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JavaParser.ConstructorModifiersContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 36
        self.enterRecursionRule(localctx, 36, self.RULE_constructorModifiers, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 434
            self.constructorModifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 440
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = JavaParser.ConstructorModifiersContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_constructorModifiers)
                    self.state = 436
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 437
                    self.constructorModifier() 
                self.state = 442
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ConstructorModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUBLIC(self):
            return self.getToken(JavaParser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(JavaParser.PROTECTED, 0)

        def PRIVATE(self):
            return self.getToken(JavaParser.PRIVATE, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_constructorModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorModifier" ):
                listener.enterConstructorModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorModifier" ):
                listener.exitConstructorModifier(self)




    def constructorModifier(self):

        localctx = JavaParser.ConstructorModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_constructorModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.PUBLIC) | (1 << JavaParser.PRIVATE) | (1 << JavaParser.PROTECTED))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstructorDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(JavaParser.ID, 0)

        def AP(self):
            return self.getToken(JavaParser.AP, 0)

        def FP(self):
            return self.getToken(JavaParser.FP, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(JavaParser.FormalParameterListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_constructorDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDeclarator" ):
                listener.enterConstructorDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDeclarator" ):
                listener.exitConstructorDeclarator(self)




    def constructorDeclarator(self):

        localctx = JavaParser.ConstructorDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_constructorDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 445
            self.match(JavaParser.ID)
            self.state = 446
            self.match(JavaParser.AP)
            self.state = 448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.SHORT) | (1 << JavaParser.BYTE) | (1 << JavaParser.INT) | (1 << JavaParser.LONG) | (1 << JavaParser.CHAR) | (1 << JavaParser.FLOAT) | (1 << JavaParser.LOGICAL))) != 0) or _la==JavaParser.ID:
                self.state = 447
                self.formalParameterList()


            self.state = 450
            self.match(JavaParser.FP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FormalParameterListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formalParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.FormalParameterContext)
            else:
                return self.getTypedRuleContext(JavaParser.FormalParameterContext,i)


        def VIRGULA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.VIRGULA)
            else:
                return self.getToken(JavaParser.VIRGULA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_formalParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameterList" ):
                listener.enterFormalParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameterList" ):
                listener.exitFormalParameterList(self)




    def formalParameterList(self):

        localctx = JavaParser.FormalParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_formalParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 452
            self.formalParameter()
            self.state = 457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParser.VIRGULA:
                self.state = 453
                self.match(JavaParser.VIRGULA)
                self.state = 454
                self.formalParameter()
                self.state = 459
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FormalParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type(self):
            return self.getTypedRuleContext(JavaParser.TypeContext,0)


        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_formalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameter" ):
                listener.enterFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameter" ):
                listener.exitFormalParameter(self)




    def formalParameter(self):

        localctx = JavaParser.FormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_formalParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 460
            self.type()
            self.state = 461
            self.variableDeclaratorId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ThrowsRuleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROWS(self):
            return self.getToken(JavaParser.THROWS, 0)

        def classTypeList(self):
            return self.getTypedRuleContext(JavaParser.ClassTypeListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_throwsRule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowsRule" ):
                listener.enterThrowsRule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowsRule" ):
                listener.exitThrowsRule(self)




    def throwsRule(self):

        localctx = JavaParser.ThrowsRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_throwsRule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 463
            self.match(JavaParser.THROWS)
            self.state = 464
            self.classTypeList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassTypeListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassTypeContext)
            else:
                return self.getTypedRuleContext(JavaParser.ClassTypeContext,i)


        def VIRGULA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.VIRGULA)
            else:
                return self.getToken(JavaParser.VIRGULA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_classTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassTypeList" ):
                listener.enterClassTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassTypeList" ):
                listener.exitClassTypeList(self)




    def classTypeList(self):

        localctx = JavaParser.ClassTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_classTypeList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            self.classType()
            self.state = 471
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 467
                    self.match(JavaParser.VIRGULA)
                    self.state = 468
                    self.classType() 
                self.state = 473
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstructorBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACH(self):
            return self.getToken(JavaParser.ACH, 0)

        def FCH(self):
            return self.getToken(JavaParser.FCH, 0)

        def explicitConstructorInvocation(self):
            return self.getTypedRuleContext(JavaParser.ExplicitConstructorInvocationContext,0)


        def blockStatements(self):
            return self.getTypedRuleContext(JavaParser.BlockStatementsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_constructorBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorBody" ):
                listener.enterConstructorBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorBody" ):
                listener.exitConstructorBody(self)




    def constructorBody(self):

        localctx = JavaParser.ConstructorBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_constructorBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 474
            self.match(JavaParser.ACH)
            self.state = 476
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 475
                self.explicitConstructorInvocation()


            self.state = 479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.HEX_NUMERAL) | (1 << JavaParser.OCTAL_NUMERAL) | (1 << JavaParser.NUMERO) | (1 << JavaParser.SHORT) | (1 << JavaParser.BYTE) | (1 << JavaParser.INT) | (1 << JavaParser.LONG) | (1 << JavaParser.CHAR) | (1 << JavaParser.FLOAT) | (1 << JavaParser.LOGICAL) | (1 << JavaParser.NEW) | (1 << JavaParser.EXTENDS) | (1 << JavaParser.THIS) | (1 << JavaParser.SUPER) | (1 << JavaParser.THROW) | (1 << JavaParser.INC) | (1 << JavaParser.DEC))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (JavaParser.ACH - 74)) | (1 << (JavaParser.AP - 74)) | (1 << (JavaParser.IF - 74)) | (1 << (JavaParser.SWITCH - 74)) | (1 << (JavaParser.DO - 74)) | (1 << (JavaParser.WHILE - 74)) | (1 << (JavaParser.FOR - 74)) | (1 << (JavaParser.BREAK - 74)) | (1 << (JavaParser.CONTINUE - 74)) | (1 << (JavaParser.RETURN - 74)) | (1 << (JavaParser.TRY - 74)) | (1 << (JavaParser.ASPAS - 74)) | (1 << (JavaParser.STRING - 74)) | (1 << (JavaParser.ID - 74)) | (1 << (JavaParser.SYNCHRONIZED - 74)) | (1 << (JavaParser.DIGITO - 74)) | (1 << (JavaParser.NULL - 74)))) != 0):
                self.state = 478
                self.blockStatements()


            self.state = 481
            self.match(JavaParser.FCH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExplicitConstructorInvocationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THIS(self):
            return self.getToken(JavaParser.THIS, 0)

        def AP(self):
            return self.getToken(JavaParser.AP, 0)

        def FP(self):
            return self.getToken(JavaParser.FP, 0)

        def argumentlist(self):
            return self.getTypedRuleContext(JavaParser.ArgumentlistContext,0)


        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_explicitConstructorInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitConstructorInvocation" ):
                listener.enterExplicitConstructorInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitConstructorInvocation" ):
                listener.exitExplicitConstructorInvocation(self)




    def explicitConstructorInvocation(self):

        localctx = JavaParser.ExplicitConstructorInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_explicitConstructorInvocation)
        self._la = 0 # Token type
        try:
            self.state = 495
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.THIS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 483
                self.match(JavaParser.THIS)
                self.state = 484
                self.match(JavaParser.AP)
                self.state = 486
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.HEX_NUMERAL) | (1 << JavaParser.OCTAL_NUMERAL) | (1 << JavaParser.NUMERO) | (1 << JavaParser.LOGICAL) | (1 << JavaParser.NEW) | (1 << JavaParser.EXTENDS) | (1 << JavaParser.THIS) | (1 << JavaParser.ADD) | (1 << JavaParser.SUB) | (1 << JavaParser.INC) | (1 << JavaParser.DEC))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (JavaParser.AP - 76)) | (1 << (JavaParser.EXCLAMACAO - 76)) | (1 << (JavaParser.NOT - 76)) | (1 << (JavaParser.ASPAS - 76)) | (1 << (JavaParser.STRING - 76)) | (1 << (JavaParser.ID - 76)) | (1 << (JavaParser.DIGITO - 76)) | (1 << (JavaParser.NULL - 76)))) != 0):
                    self.state = 485
                    self.argumentlist()


                self.state = 488
                self.match(JavaParser.FP)
                pass
            elif token in [JavaParser.SUPER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 489
                self.match(JavaParser.SUPER)
                self.state = 490
                self.match(JavaParser.AP)
                self.state = 492
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.HEX_NUMERAL) | (1 << JavaParser.OCTAL_NUMERAL) | (1 << JavaParser.NUMERO) | (1 << JavaParser.LOGICAL) | (1 << JavaParser.NEW) | (1 << JavaParser.EXTENDS) | (1 << JavaParser.THIS) | (1 << JavaParser.ADD) | (1 << JavaParser.SUB) | (1 << JavaParser.INC) | (1 << JavaParser.DEC))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (JavaParser.AP - 76)) | (1 << (JavaParser.EXCLAMACAO - 76)) | (1 << (JavaParser.NOT - 76)) | (1 << (JavaParser.ASPAS - 76)) | (1 << (JavaParser.STRING - 76)) | (1 << (JavaParser.ID - 76)) | (1 << (JavaParser.DIGITO - 76)) | (1 << (JavaParser.NULL - 76)))) != 0):
                    self.state = 491
                    self.argumentlist()


                self.state = 494
                self.match(JavaParser.FP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FieldDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type(self):
            return self.getTypedRuleContext(JavaParser.TypeContext,0)


        def variableDeclarators(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorsContext,0)


        def fieldModifiers(self):
            return self.getTypedRuleContext(JavaParser.FieldModifiersContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_fieldDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldDeclaration" ):
                listener.enterFieldDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldDeclaration" ):
                listener.exitFieldDeclaration(self)




    def fieldDeclaration(self):

        localctx = JavaParser.FieldDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_fieldDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 498
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.FINAL) | (1 << JavaParser.PUBLIC) | (1 << JavaParser.PRIVATE) | (1 << JavaParser.PROTECTED) | (1 << JavaParser.STATIC) | (1 << JavaParser.TRANSIENT) | (1 << JavaParser.VOLATILE))) != 0):
                self.state = 497
                self.fieldModifiers()


            self.state = 500
            self.type()
            self.state = 501
            self.variableDeclarators()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FieldModifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.FieldModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.FieldModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_fieldModifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldModifiers" ):
                listener.enterFieldModifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldModifiers" ):
                listener.exitFieldModifiers(self)




    def fieldModifiers(self):

        localctx = JavaParser.FieldModifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_fieldModifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 504 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 503
                self.fieldModifier()
                self.state = 506 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.FINAL) | (1 << JavaParser.PUBLIC) | (1 << JavaParser.PRIVATE) | (1 << JavaParser.PROTECTED) | (1 << JavaParser.STATIC) | (1 << JavaParser.TRANSIENT) | (1 << JavaParser.VOLATILE))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FieldModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUBLIC(self):
            return self.getToken(JavaParser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(JavaParser.PROTECTED, 0)

        def PRIVATE(self):
            return self.getToken(JavaParser.PRIVATE, 0)

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def FINAL(self):
            return self.getToken(JavaParser.FINAL, 0)

        def TRANSIENT(self):
            return self.getToken(JavaParser.TRANSIENT, 0)

        def VOLATILE(self):
            return self.getToken(JavaParser.VOLATILE, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_fieldModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldModifier" ):
                listener.enterFieldModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldModifier" ):
                listener.exitFieldModifier(self)




    def fieldModifier(self):

        localctx = JavaParser.FieldModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_fieldModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 508
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.FINAL) | (1 << JavaParser.PUBLIC) | (1 << JavaParser.PRIVATE) | (1 << JavaParser.PROTECTED) | (1 << JavaParser.STATIC) | (1 << JavaParser.TRANSIENT) | (1 << JavaParser.VOLATILE))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclaratorsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableDeclaratorContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableDeclaratorContext,i)


        def VIRGULA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.VIRGULA)
            else:
                return self.getToken(JavaParser.VIRGULA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_variableDeclarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarators" ):
                listener.enterVariableDeclarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarators" ):
                listener.exitVariableDeclarators(self)




    def variableDeclarators(self):

        localctx = JavaParser.VariableDeclaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_variableDeclarators)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 510
            self.variableDeclarator()
            self.state = 515
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 511
                    self.match(JavaParser.VIRGULA)
                    self.state = 512
                    self.variableDeclarator() 
                self.state = 517
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext,0)


        def IGUAL_ATRIB(self):
            return self.getToken(JavaParser.IGUAL_ATRIB, 0)

        def variableInitializer(self):
            return self.getTypedRuleContext(JavaParser.VariableInitializerContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_variableDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarator" ):
                listener.enterVariableDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarator" ):
                listener.exitVariableDeclarator(self)




    def variableDeclarator(self):

        localctx = JavaParser.VariableDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_variableDeclarator)
        try:
            self.state = 523
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 518
                self.variableDeclaratorId()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 519
                self.variableDeclaratorId()
                self.state = 520
                self.match(JavaParser.IGUAL_ATRIB)
                self.state = 521
                self.variableInitializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclaratorIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(JavaParser.ID, 0)

        def AC(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.AC)
            else:
                return self.getToken(JavaParser.AC, i)

        def FC(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.FC)
            else:
                return self.getToken(JavaParser.FC, i)

        def getRuleIndex(self):
            return JavaParser.RULE_variableDeclaratorId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaratorId" ):
                listener.enterVariableDeclaratorId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaratorId" ):
                listener.exitVariableDeclaratorId(self)




    def variableDeclaratorId(self):

        localctx = JavaParser.VariableDeclaratorIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_variableDeclaratorId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 525
            self.match(JavaParser.ID)
            self.state = 530
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 526
                    self.match(JavaParser.AC)
                    self.state = 527
                    self.match(JavaParser.FC) 
                self.state = 532
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableInitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def arrayInitializer(self):
            return self.getTypedRuleContext(JavaParser.ArrayInitializerContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_variableInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableInitializer" ):
                listener.enterVariableInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableInitializer" ):
                listener.exitVariableInitializer(self)




    def variableInitializer(self):

        localctx = JavaParser.VariableInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_variableInitializer)
        try:
            self.state = 535
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.HEX_NUMERAL, JavaParser.OCTAL_NUMERAL, JavaParser.NUMERO, JavaParser.LOGICAL, JavaParser.NEW, JavaParser.EXTENDS, JavaParser.THIS, JavaParser.ADD, JavaParser.SUB, JavaParser.INC, JavaParser.DEC, JavaParser.AP, JavaParser.EXCLAMACAO, JavaParser.NOT, JavaParser.ASPAS, JavaParser.STRING, JavaParser.ID, JavaParser.DIGITO, JavaParser.NULL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 533
                self.expression()
                pass
            elif token in [JavaParser.ACH]:
                self.enterOuterAlt(localctx, 2)
                self.state = 534
                self.arrayInitializer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MethodDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def methodHeader(self):
            return self.getTypedRuleContext(JavaParser.MethodHeaderContext,0)


        def methodBody(self):
            return self.getTypedRuleContext(JavaParser.MethodBodyContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_methodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDeclaration" ):
                listener.enterMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDeclaration" ):
                listener.exitMethodDeclaration(self)




    def methodDeclaration(self):

        localctx = JavaParser.MethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_methodDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 537
            self.methodHeader()
            self.state = 538
            self.methodBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MethodHeaderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def resultType(self):
            return self.getTypedRuleContext(JavaParser.ResultTypeContext,0)


        def methodDeclarator(self):
            return self.getTypedRuleContext(JavaParser.MethodDeclaratorContext,0)


        def methodModifiers(self):
            return self.getTypedRuleContext(JavaParser.MethodModifiersContext,0)


        def throwsRule(self):
            return self.getTypedRuleContext(JavaParser.ThrowsRuleContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_methodHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodHeader" ):
                listener.enterMethodHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodHeader" ):
                listener.exitMethodHeader(self)




    def methodHeader(self):

        localctx = JavaParser.MethodHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_methodHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.ABSTRACT) | (1 << JavaParser.FINAL) | (1 << JavaParser.PUBLIC) | (1 << JavaParser.PRIVATE) | (1 << JavaParser.PROTECTED) | (1 << JavaParser.STATIC) | (1 << JavaParser.NATIVE))) != 0) or _la==JavaParser.SYNCHRONIZED:
                self.state = 540
                self.methodModifiers(0)


            self.state = 543
            self.resultType()
            self.state = 544
            self.methodDeclarator()
            self.state = 546
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 545
                self.throwsRule()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ResultTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type(self):
            return self.getTypedRuleContext(JavaParser.TypeContext,0)


        def VOID(self):
            return self.getToken(JavaParser.VOID, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_resultType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResultType" ):
                listener.enterResultType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResultType" ):
                listener.exitResultType(self)




    def resultType(self):

        localctx = JavaParser.ResultTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_resultType)
        try:
            self.state = 550
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.SHORT, JavaParser.BYTE, JavaParser.INT, JavaParser.LONG, JavaParser.CHAR, JavaParser.FLOAT, JavaParser.LOGICAL, JavaParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 548
                self.type()
                pass
            elif token in [JavaParser.VOID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 549
                self.match(JavaParser.VOID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MethodModifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def methodModifier(self):
            return self.getTypedRuleContext(JavaParser.MethodModifierContext,0)


        def methodModifiers(self):
            return self.getTypedRuleContext(JavaParser.MethodModifiersContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_methodModifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodModifiers" ):
                listener.enterMethodModifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodModifiers" ):
                listener.exitMethodModifiers(self)



    def methodModifiers(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JavaParser.MethodModifiersContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 74
        self.enterRecursionRule(localctx, 74, self.RULE_methodModifiers, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 553
            self.methodModifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 559
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = JavaParser.MethodModifiersContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_methodModifiers)
                    self.state = 555
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 556
                    self.methodModifier() 
                self.state = 561
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class MethodModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUBLIC(self):
            return self.getToken(JavaParser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(JavaParser.PROTECTED, 0)

        def PRIVATE(self):
            return self.getToken(JavaParser.PRIVATE, 0)

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def ABSTRACT(self):
            return self.getToken(JavaParser.ABSTRACT, 0)

        def FINAL(self):
            return self.getToken(JavaParser.FINAL, 0)

        def SYNCHRONIZED(self):
            return self.getToken(JavaParser.SYNCHRONIZED, 0)

        def NATIVE(self):
            return self.getToken(JavaParser.NATIVE, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_methodModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodModifier" ):
                listener.enterMethodModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodModifier" ):
                listener.exitMethodModifier(self)




    def methodModifier(self):

        localctx = JavaParser.MethodModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_methodModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.ABSTRACT) | (1 << JavaParser.FINAL) | (1 << JavaParser.PUBLIC) | (1 << JavaParser.PRIVATE) | (1 << JavaParser.PROTECTED) | (1 << JavaParser.STATIC) | (1 << JavaParser.NATIVE))) != 0) or _la==JavaParser.SYNCHRONIZED):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MethodDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(JavaParser.ID, 0)

        def AP(self):
            return self.getToken(JavaParser.AP, 0)

        def FP(self):
            return self.getToken(JavaParser.FP, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(JavaParser.FormalParameterListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_methodDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDeclarator" ):
                listener.enterMethodDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDeclarator" ):
                listener.exitMethodDeclarator(self)




    def methodDeclarator(self):

        localctx = JavaParser.MethodDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_methodDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self.match(JavaParser.ID)
            self.state = 565
            self.match(JavaParser.AP)
            self.state = 567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.SHORT) | (1 << JavaParser.BYTE) | (1 << JavaParser.INT) | (1 << JavaParser.LONG) | (1 << JavaParser.CHAR) | (1 << JavaParser.FLOAT) | (1 << JavaParser.LOGICAL))) != 0) or _la==JavaParser.ID:
                self.state = 566
                self.formalParameterList()


            self.state = 569
            self.match(JavaParser.FP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MethodBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_methodBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodBody" ):
                listener.enterMethodBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodBody" ):
                listener.exitMethodBody(self)




    def methodBody(self):

        localctx = JavaParser.MethodBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_methodBody)
        try:
            self.state = 573
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 571
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERFACE(self):
            return self.getToken(JavaParser.INTERFACE, 0)

        def ID(self):
            return self.getToken(JavaParser.ID, 0)

        def interfaceBody(self):
            return self.getTypedRuleContext(JavaParser.InterfaceBodyContext,0)


        def interfaceModifiers(self):
            return self.getTypedRuleContext(JavaParser.InterfaceModifiersContext,0)


        def extendsInterfaces(self):
            return self.getTypedRuleContext(JavaParser.ExtendsInterfacesContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_interfaceDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceDeclaration" ):
                listener.enterInterfaceDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceDeclaration" ):
                listener.exitInterfaceDeclaration(self)




    def interfaceDeclaration(self):

        localctx = JavaParser.InterfaceDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_interfaceDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.ABSTRACT or _la==JavaParser.PUBLIC:
                self.state = 575
                self.interfaceModifiers()


            self.state = 578
            self.match(JavaParser.INTERFACE)
            self.state = 579
            self.match(JavaParser.ID)
            self.state = 581
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.EXTENDS:
                self.state = 580
                self.extendsInterfaces()


            self.state = 583
            self.interfaceBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceModifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interfaceModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.InterfaceModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.InterfaceModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_interfaceModifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceModifiers" ):
                listener.enterInterfaceModifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceModifiers" ):
                listener.exitInterfaceModifiers(self)




    def interfaceModifiers(self):

        localctx = JavaParser.InterfaceModifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_interfaceModifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 585
                self.interfaceModifier()
                self.state = 588 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==JavaParser.ABSTRACT or _la==JavaParser.PUBLIC):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUBLIC(self):
            return self.getToken(JavaParser.PUBLIC, 0)

        def ABSTRACT(self):
            return self.getToken(JavaParser.ABSTRACT, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_interfaceModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceModifier" ):
                listener.enterInterfaceModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceModifier" ):
                listener.exitInterfaceModifier(self)




    def interfaceModifier(self):

        localctx = JavaParser.InterfaceModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_interfaceModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590
            _la = self._input.LA(1)
            if not(_la==JavaParser.ABSTRACT or _la==JavaParser.PUBLIC):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExtendsInterfacesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTENDS(self):
            return self.getToken(JavaParser.EXTENDS, 0)

        def interfaceType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.InterfaceTypeContext)
            else:
                return self.getTypedRuleContext(JavaParser.InterfaceTypeContext,i)


        def VIRGULA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.VIRGULA)
            else:
                return self.getToken(JavaParser.VIRGULA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_extendsInterfaces

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtendsInterfaces" ):
                listener.enterExtendsInterfaces(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtendsInterfaces" ):
                listener.exitExtendsInterfaces(self)




    def extendsInterfaces(self):

        localctx = JavaParser.ExtendsInterfacesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_extendsInterfaces)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            self.match(JavaParser.EXTENDS)
            self.state = 593
            self.interfaceType()
            self.state = 596 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 594
                self.match(JavaParser.VIRGULA)
                self.state = 595
                self.interfaceType()
                self.state = 598 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==JavaParser.VIRGULA):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACH(self):
            return self.getToken(JavaParser.ACH, 0)

        def FCH(self):
            return self.getToken(JavaParser.FCH, 0)

        def interfaceMemberDeclarations(self):
            return self.getTypedRuleContext(JavaParser.InterfaceMemberDeclarationsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_interfaceBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceBody" ):
                listener.enterInterfaceBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceBody" ):
                listener.exitInterfaceBody(self)




    def interfaceBody(self):

        localctx = JavaParser.InterfaceBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_interfaceBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 600
            self.match(JavaParser.ACH)
            self.state = 602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.SHORT) | (1 << JavaParser.BYTE) | (1 << JavaParser.INT) | (1 << JavaParser.LONG) | (1 << JavaParser.CHAR) | (1 << JavaParser.FLOAT) | (1 << JavaParser.LOGICAL) | (1 << JavaParser.ABSTRACT) | (1 << JavaParser.FINAL) | (1 << JavaParser.PUBLIC) | (1 << JavaParser.STATIC) | (1 << JavaParser.VOID))) != 0) or _la==JavaParser.ID:
                self.state = 601
                self.interfaceMemberDeclarations()


            self.state = 604
            self.match(JavaParser.FCH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceMemberDeclarationsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interfaceMemberDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.InterfaceMemberDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.InterfaceMemberDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_interfaceMemberDeclarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMemberDeclarations" ):
                listener.enterInterfaceMemberDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMemberDeclarations" ):
                listener.exitInterfaceMemberDeclarations(self)




    def interfaceMemberDeclarations(self):

        localctx = JavaParser.InterfaceMemberDeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_interfaceMemberDeclarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 607 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 606
                self.interfaceMemberDeclaration()
                self.state = 609 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.SHORT) | (1 << JavaParser.BYTE) | (1 << JavaParser.INT) | (1 << JavaParser.LONG) | (1 << JavaParser.CHAR) | (1 << JavaParser.FLOAT) | (1 << JavaParser.LOGICAL) | (1 << JavaParser.ABSTRACT) | (1 << JavaParser.FINAL) | (1 << JavaParser.PUBLIC) | (1 << JavaParser.STATIC) | (1 << JavaParser.VOID))) != 0) or _la==JavaParser.ID):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceMemberDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ConstantDeclarationContext,0)


        def abstractMethodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.AbstractMethodDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_interfaceMemberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMemberDeclaration" ):
                listener.enterInterfaceMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMemberDeclaration" ):
                listener.exitInterfaceMemberDeclaration(self)




    def interfaceMemberDeclaration(self):

        localctx = JavaParser.InterfaceMemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_interfaceMemberDeclaration)
        try:
            self.state = 613
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 611
                self.constantDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 612
                self.abstractMethodDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantModifiers(self):
            return self.getTypedRuleContext(JavaParser.ConstantModifiersContext,0)


        def type(self):
            return self.getTypedRuleContext(JavaParser.TypeContext,0)


        def variableDeclarator(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_constantDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantDeclaration" ):
                listener.enterConstantDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantDeclaration" ):
                listener.exitConstantDeclaration(self)




    def constantDeclaration(self):

        localctx = JavaParser.ConstantDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_constantDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 615
            self.constantModifiers()
            self.state = 616
            self.type()
            self.state = 617
            self.variableDeclarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantModifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUBLIC(self):
            return self.getToken(JavaParser.PUBLIC, 0)

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def FINAL(self):
            return self.getToken(JavaParser.FINAL, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_constantModifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantModifiers" ):
                listener.enterConstantModifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantModifiers" ):
                listener.exitConstantModifiers(self)




    def constantModifiers(self):

        localctx = JavaParser.ConstantModifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_constantModifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 619
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.FINAL) | (1 << JavaParser.PUBLIC) | (1 << JavaParser.STATIC))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AbstractMethodDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def resultType(self):
            return self.getTypedRuleContext(JavaParser.ResultTypeContext,0)


        def methodDeclarator(self):
            return self.getTypedRuleContext(JavaParser.MethodDeclaratorContext,0)


        def abstractMethodModifiers(self):
            return self.getTypedRuleContext(JavaParser.AbstractMethodModifiersContext,0)


        def throwsRule(self):
            return self.getTypedRuleContext(JavaParser.ThrowsRuleContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_abstractMethodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractMethodDeclaration" ):
                listener.enterAbstractMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractMethodDeclaration" ):
                listener.exitAbstractMethodDeclaration(self)




    def abstractMethodDeclaration(self):

        localctx = JavaParser.AbstractMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_abstractMethodDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.ABSTRACT or _la==JavaParser.PUBLIC:
                self.state = 621
                self.abstractMethodModifiers(0)


            self.state = 624
            self.resultType()
            self.state = 625
            self.methodDeclarator()
            self.state = 627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.THROWS:
                self.state = 626
                self.throwsRule()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AbstractMethodModifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def abstractMethodModifier(self):
            return self.getTypedRuleContext(JavaParser.AbstractMethodModifierContext,0)


        def abstractMethodModifiers(self):
            return self.getTypedRuleContext(JavaParser.AbstractMethodModifiersContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_abstractMethodModifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractMethodModifiers" ):
                listener.enterAbstractMethodModifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractMethodModifiers" ):
                listener.exitAbstractMethodModifiers(self)



    def abstractMethodModifiers(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JavaParser.AbstractMethodModifiersContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 102
        self.enterRecursionRule(localctx, 102, self.RULE_abstractMethodModifiers, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 630
            self.abstractMethodModifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 636
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = JavaParser.AbstractMethodModifiersContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_abstractMethodModifiers)
                    self.state = 632
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 633
                    self.abstractMethodModifier() 
                self.state = 638
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AbstractMethodModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUBLIC(self):
            return self.getToken(JavaParser.PUBLIC, 0)

        def ABSTRACT(self):
            return self.getToken(JavaParser.ABSTRACT, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_abstractMethodModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractMethodModifier" ):
                listener.enterAbstractMethodModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractMethodModifier" ):
                listener.exitAbstractMethodModifier(self)




    def abstractMethodModifier(self):

        localctx = JavaParser.AbstractMethodModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_abstractMethodModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 639
            _la = self._input.LA(1)
            if not(_la==JavaParser.ABSTRACT or _la==JavaParser.PUBLIC):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayInitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACH(self):
            return self.getToken(JavaParser.ACH, 0)

        def FCH(self):
            return self.getToken(JavaParser.FCH, 0)

        def variableInitializers(self):
            return self.getTypedRuleContext(JavaParser.VariableInitializersContext,0)


        def VIRGULA(self):
            return self.getToken(JavaParser.VIRGULA, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_arrayInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayInitializer" ):
                listener.enterArrayInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayInitializer" ):
                listener.exitArrayInitializer(self)




    def arrayInitializer(self):

        localctx = JavaParser.ArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_arrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self.match(JavaParser.ACH)
            self.state = 643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.HEX_NUMERAL) | (1 << JavaParser.OCTAL_NUMERAL) | (1 << JavaParser.NUMERO) | (1 << JavaParser.LOGICAL) | (1 << JavaParser.NEW) | (1 << JavaParser.EXTENDS) | (1 << JavaParser.THIS) | (1 << JavaParser.ADD) | (1 << JavaParser.SUB) | (1 << JavaParser.INC) | (1 << JavaParser.DEC))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (JavaParser.ACH - 74)) | (1 << (JavaParser.AP - 74)) | (1 << (JavaParser.EXCLAMACAO - 74)) | (1 << (JavaParser.NOT - 74)) | (1 << (JavaParser.ASPAS - 74)) | (1 << (JavaParser.STRING - 74)) | (1 << (JavaParser.ID - 74)) | (1 << (JavaParser.DIGITO - 74)) | (1 << (JavaParser.NULL - 74)))) != 0):
                self.state = 642
                self.variableInitializers()


            self.state = 646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.VIRGULA:
                self.state = 645
                self.match(JavaParser.VIRGULA)


            self.state = 648
            self.match(JavaParser.FCH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableInitializersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableInitializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableInitializerContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableInitializerContext,i)


        def VIRGULA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.VIRGULA)
            else:
                return self.getToken(JavaParser.VIRGULA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_variableInitializers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableInitializers" ):
                listener.enterVariableInitializers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableInitializers" ):
                listener.exitVariableInitializers(self)




    def variableInitializers(self):

        localctx = JavaParser.VariableInitializersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_variableInitializers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 650
            self.variableInitializer()
            self.state = 655
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 651
                    self.match(JavaParser.VIRGULA)
                    self.state = 652
                    self.variableInitializer() 
                self.state = 657
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primitiveType(self):
            return self.getTypedRuleContext(JavaParser.PrimitiveTypeContext,0)


        def referenceType(self):
            return self.getTypedRuleContext(JavaParser.ReferenceTypeContext,0)


        def AC(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.AC)
            else:
                return self.getToken(JavaParser.AC, i)

        def FC(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.FC)
            else:
                return self.getToken(JavaParser.FC, i)

        def getRuleIndex(self):
            return JavaParser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)




    def type(self):

        localctx = JavaParser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_type)
        self._la = 0 # Token type
        try:
            self.state = 667
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.SHORT, JavaParser.BYTE, JavaParser.INT, JavaParser.LONG, JavaParser.CHAR, JavaParser.FLOAT, JavaParser.LOGICAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 658
                self.primitiveType()
                pass
            elif token in [JavaParser.ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 659
                self.referenceType()
                self.state = 664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==JavaParser.AC:
                    self.state = 660
                    self.match(JavaParser.AC)
                    self.state = 661
                    self.match(JavaParser.FC)
                    self.state = 666
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimitiveTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numericType(self):
            return self.getTypedRuleContext(JavaParser.NumericTypeContext,0)


        def LOGICAL(self):
            return self.getToken(JavaParser.LOGICAL, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_primitiveType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveType" ):
                listener.enterPrimitiveType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveType" ):
                listener.exitPrimitiveType(self)




    def primitiveType(self):

        localctx = JavaParser.PrimitiveTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_primitiveType)
        try:
            self.state = 671
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.SHORT, JavaParser.BYTE, JavaParser.INT, JavaParser.LONG, JavaParser.CHAR, JavaParser.FLOAT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 669
                self.numericType()
                pass
            elif token in [JavaParser.LOGICAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 670
                self.match(JavaParser.LOGICAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumericTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integralType(self):
            return self.getTypedRuleContext(JavaParser.IntegralTypeContext,0)


        def FLOAT(self):
            return self.getToken(JavaParser.FLOAT, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_numericType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericType" ):
                listener.enterNumericType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericType" ):
                listener.exitNumericType(self)




    def numericType(self):

        localctx = JavaParser.NumericTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_numericType)
        try:
            self.state = 675
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.SHORT, JavaParser.BYTE, JavaParser.INT, JavaParser.LONG, JavaParser.CHAR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 673
                self.integralType()
                pass
            elif token in [JavaParser.FLOAT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 674
                self.match(JavaParser.FLOAT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntegralTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BYTE(self):
            return self.getToken(JavaParser.BYTE, 0)

        def SHORT(self):
            return self.getToken(JavaParser.SHORT, 0)

        def INT(self):
            return self.getToken(JavaParser.INT, 0)

        def LONG(self):
            return self.getToken(JavaParser.LONG, 0)

        def CHAR(self):
            return self.getToken(JavaParser.CHAR, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_integralType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegralType" ):
                listener.enterIntegralType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegralType" ):
                listener.exitIntegralType(self)




    def integralType(self):

        localctx = JavaParser.IntegralTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_integralType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.SHORT) | (1 << JavaParser.BYTE) | (1 << JavaParser.INT) | (1 << JavaParser.LONG) | (1 << JavaParser.CHAR))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReferenceTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classOrInterfaceType(self):
            return self.getTypedRuleContext(JavaParser.ClassOrInterfaceTypeContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_referenceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceType" ):
                listener.enterReferenceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceType" ):
                listener.exitReferenceType(self)




    def referenceType(self):

        localctx = JavaParser.ReferenceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_referenceType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 679
            self.classOrInterfaceType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassOrInterfaceTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classType(self):
            return self.getTypedRuleContext(JavaParser.ClassTypeContext,0)


        def interfaceType(self):
            return self.getTypedRuleContext(JavaParser.InterfaceTypeContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_classOrInterfaceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassOrInterfaceType" ):
                listener.enterClassOrInterfaceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassOrInterfaceType" ):
                listener.exitClassOrInterfaceType(self)




    def classOrInterfaceType(self):

        localctx = JavaParser.ClassOrInterfaceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_classOrInterfaceType)
        try:
            self.state = 683
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 681
                self.classType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 682
                self.interfaceType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(JavaParser.TypeNameContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_classType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassType" ):
                listener.enterClassType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassType" ):
                listener.exitClassType(self)




    def classType(self):

        localctx = JavaParser.ClassTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_classType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            self.typeName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(JavaParser.TypeNameContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_interfaceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceType" ):
                listener.enterInterfaceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceType" ):
                listener.exitInterfaceType(self)




    def interfaceType(self):

        localctx = JavaParser.InterfaceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_interfaceType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 687
            self.typeName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACH(self):
            return self.getToken(JavaParser.ACH, 0)

        def FCH(self):
            return self.getToken(JavaParser.FCH, 0)

        def blockStatements(self):
            return self.getTypedRuleContext(JavaParser.BlockStatementsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = JavaParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 689
            self.match(JavaParser.ACH)
            self.state = 691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.HEX_NUMERAL) | (1 << JavaParser.OCTAL_NUMERAL) | (1 << JavaParser.NUMERO) | (1 << JavaParser.SHORT) | (1 << JavaParser.BYTE) | (1 << JavaParser.INT) | (1 << JavaParser.LONG) | (1 << JavaParser.CHAR) | (1 << JavaParser.FLOAT) | (1 << JavaParser.LOGICAL) | (1 << JavaParser.NEW) | (1 << JavaParser.EXTENDS) | (1 << JavaParser.THIS) | (1 << JavaParser.SUPER) | (1 << JavaParser.THROW) | (1 << JavaParser.INC) | (1 << JavaParser.DEC))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (JavaParser.ACH - 74)) | (1 << (JavaParser.AP - 74)) | (1 << (JavaParser.IF - 74)) | (1 << (JavaParser.SWITCH - 74)) | (1 << (JavaParser.DO - 74)) | (1 << (JavaParser.WHILE - 74)) | (1 << (JavaParser.FOR - 74)) | (1 << (JavaParser.BREAK - 74)) | (1 << (JavaParser.CONTINUE - 74)) | (1 << (JavaParser.RETURN - 74)) | (1 << (JavaParser.TRY - 74)) | (1 << (JavaParser.ASPAS - 74)) | (1 << (JavaParser.STRING - 74)) | (1 << (JavaParser.ID - 74)) | (1 << (JavaParser.SYNCHRONIZED - 74)) | (1 << (JavaParser.DIGITO - 74)) | (1 << (JavaParser.NULL - 74)))) != 0):
                self.state = 690
                self.blockStatements()


            self.state = 693
            self.match(JavaParser.FCH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockStatementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JavaParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_blockStatements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatements" ):
                listener.enterBlockStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatements" ):
                listener.exitBlockStatements(self)




    def blockStatements(self):

        localctx = JavaParser.BlockStatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_blockStatements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 696 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 695
                self.blockStatement()
                self.state = 698 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.HEX_NUMERAL) | (1 << JavaParser.OCTAL_NUMERAL) | (1 << JavaParser.NUMERO) | (1 << JavaParser.SHORT) | (1 << JavaParser.BYTE) | (1 << JavaParser.INT) | (1 << JavaParser.LONG) | (1 << JavaParser.CHAR) | (1 << JavaParser.FLOAT) | (1 << JavaParser.LOGICAL) | (1 << JavaParser.NEW) | (1 << JavaParser.EXTENDS) | (1 << JavaParser.THIS) | (1 << JavaParser.SUPER) | (1 << JavaParser.THROW) | (1 << JavaParser.INC) | (1 << JavaParser.DEC))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (JavaParser.ACH - 74)) | (1 << (JavaParser.AP - 74)) | (1 << (JavaParser.IF - 74)) | (1 << (JavaParser.SWITCH - 74)) | (1 << (JavaParser.DO - 74)) | (1 << (JavaParser.WHILE - 74)) | (1 << (JavaParser.FOR - 74)) | (1 << (JavaParser.BREAK - 74)) | (1 << (JavaParser.CONTINUE - 74)) | (1 << (JavaParser.RETURN - 74)) | (1 << (JavaParser.TRY - 74)) | (1 << (JavaParser.ASPAS - 74)) | (1 << (JavaParser.STRING - 74)) | (1 << (JavaParser.ID - 74)) | (1 << (JavaParser.SYNCHRONIZED - 74)) | (1 << (JavaParser.DIGITO - 74)) | (1 << (JavaParser.NULL - 74)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclarationStatement(self):
            return self.getTypedRuleContext(JavaParser.LocalVariableDeclarationStatementContext,0)


        def statement(self):
            return self.getTypedRuleContext(JavaParser.StatementContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_blockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatement" ):
                listener.enterBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatement" ):
                listener.exitBlockStatement(self)




    def blockStatement(self):

        localctx = JavaParser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_blockStatement)
        try:
            self.state = 702
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 700
                self.localVariableDeclarationStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 701
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LocalVariableDeclarationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(JavaParser.LocalVariableDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_localVariableDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalVariableDeclarationStatement" ):
                listener.enterLocalVariableDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalVariableDeclarationStatement" ):
                listener.exitLocalVariableDeclarationStatement(self)




    def localVariableDeclarationStatement(self):

        localctx = JavaParser.LocalVariableDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_localVariableDeclarationStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 704
            self.localVariableDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LocalVariableDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type(self):
            return self.getTypedRuleContext(JavaParser.TypeContext,0)


        def variableDeclarators(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_localVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalVariableDeclaration" ):
                listener.enterLocalVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalVariableDeclaration" ):
                listener.exitLocalVariableDeclaration(self)




    def localVariableDeclaration(self):

        localctx = JavaParser.LocalVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_localVariableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 706
            self.type()
            self.state = 707
            self.variableDeclarators()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementWithoutTrailingSubstatement(self):
            return self.getTypedRuleContext(JavaParser.StatementWithoutTrailingSubstatementContext,0)


        def labeledStatement(self):
            return self.getTypedRuleContext(JavaParser.LabeledStatementContext,0)


        def ifThenStatement(self):
            return self.getTypedRuleContext(JavaParser.IfThenStatementContext,0)


        def ifThenElseStatement(self):
            return self.getTypedRuleContext(JavaParser.IfThenElseStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(JavaParser.WhileStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(JavaParser.ForStatementContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = JavaParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_statement)
        try:
            self.state = 715
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 709
                self.statementWithoutTrailingSubstatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 710
                self.labeledStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 711
                self.ifThenStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 712
                self.ifThenElseStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 713
                self.whileStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 714
                self.forStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementNoShortIfContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementWithoutTrailingSubstatement(self):
            return self.getTypedRuleContext(JavaParser.StatementWithoutTrailingSubstatementContext,0)


        def labeledStatementNoShortIf(self):
            return self.getTypedRuleContext(JavaParser.LabeledStatementNoShortIfContext,0)


        def ifThenElseStatementNoShortIf(self):
            return self.getTypedRuleContext(JavaParser.IfThenElseStatementNoShortIfContext,0)


        def whileStatementNoShortIf(self):
            return self.getTypedRuleContext(JavaParser.WhileStatementNoShortIfContext,0)


        def forStatementNoShortIf(self):
            return self.getTypedRuleContext(JavaParser.ForStatementNoShortIfContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_statementNoShortIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementNoShortIf" ):
                listener.enterStatementNoShortIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementNoShortIf" ):
                listener.exitStatementNoShortIf(self)




    def statementNoShortIf(self):

        localctx = JavaParser.StatementNoShortIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_statementNoShortIf)
        try:
            self.state = 722
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 717
                self.statementWithoutTrailingSubstatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 718
                self.labeledStatementNoShortIf()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 719
                self.ifThenElseStatementNoShortIf()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 720
                self.whileStatementNoShortIf()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 721
                self.forStatementNoShortIf()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementWithoutTrailingSubstatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(JavaParser.ExpressionStatementContext,0)


        def switchStatement(self):
            return self.getTypedRuleContext(JavaParser.SwitchStatementContext,0)


        def doStatement(self):
            return self.getTypedRuleContext(JavaParser.DoStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(JavaParser.BreakStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(JavaParser.ContinueStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(JavaParser.ReturnStatementContext,0)


        def synchronizedStatement(self):
            return self.getTypedRuleContext(JavaParser.SynchronizedStatementContext,0)


        def throwsRuleStatement(self):
            return self.getTypedRuleContext(JavaParser.ThrowsRuleStatementContext,0)


        def tryStatement(self):
            return self.getTypedRuleContext(JavaParser.TryStatementContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_statementWithoutTrailingSubstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementWithoutTrailingSubstatement" ):
                listener.enterStatementWithoutTrailingSubstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementWithoutTrailingSubstatement" ):
                listener.exitStatementWithoutTrailingSubstatement(self)




    def statementWithoutTrailingSubstatement(self):

        localctx = JavaParser.StatementWithoutTrailingSubstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_statementWithoutTrailingSubstatement)
        try:
            self.state = 734
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.ACH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 724
                self.block()
                pass
            elif token in [JavaParser.HEX_NUMERAL, JavaParser.OCTAL_NUMERAL, JavaParser.NUMERO, JavaParser.LOGICAL, JavaParser.NEW, JavaParser.EXTENDS, JavaParser.THIS, JavaParser.SUPER, JavaParser.INC, JavaParser.DEC, JavaParser.AP, JavaParser.ASPAS, JavaParser.STRING, JavaParser.ID, JavaParser.DIGITO, JavaParser.NULL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 725
                self.expressionStatement()
                pass
            elif token in [JavaParser.SWITCH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 726
                self.switchStatement()
                pass
            elif token in [JavaParser.DO]:
                self.enterOuterAlt(localctx, 4)
                self.state = 727
                self.doStatement()
                pass
            elif token in [JavaParser.BREAK]:
                self.enterOuterAlt(localctx, 5)
                self.state = 728
                self.breakStatement()
                pass
            elif token in [JavaParser.CONTINUE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 729
                self.continueStatement()
                pass
            elif token in [JavaParser.RETURN]:
                self.enterOuterAlt(localctx, 7)
                self.state = 730
                self.returnStatement()
                pass
            elif token in [JavaParser.SYNCHRONIZED]:
                self.enterOuterAlt(localctx, 8)
                self.state = 731
                self.synchronizedStatement()
                pass
            elif token in [JavaParser.THROW]:
                self.enterOuterAlt(localctx, 9)
                self.state = 732
                self.throwsRuleStatement()
                pass
            elif token in [JavaParser.TRY]:
                self.enterOuterAlt(localctx, 10)
                self.state = 733
                self.tryStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LabeledStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(JavaParser.ID, 0)

        def DOIS_PONTOS(self):
            return self.getToken(JavaParser.DOIS_PONTOS, 0)

        def statement(self):
            return self.getTypedRuleContext(JavaParser.StatementContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_labeledStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledStatement" ):
                listener.enterLabeledStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledStatement" ):
                listener.exitLabeledStatement(self)




    def labeledStatement(self):

        localctx = JavaParser.LabeledStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_labeledStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 736
            self.match(JavaParser.ID)
            self.state = 737
            self.match(JavaParser.DOIS_PONTOS)
            self.state = 738
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LabeledStatementNoShortIfContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(JavaParser.ID, 0)

        def DOIS_PONTOS(self):
            return self.getToken(JavaParser.DOIS_PONTOS, 0)

        def statementNoShortIf(self):
            return self.getTypedRuleContext(JavaParser.StatementNoShortIfContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_labeledStatementNoShortIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledStatementNoShortIf" ):
                listener.enterLabeledStatementNoShortIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledStatementNoShortIf" ):
                listener.exitLabeledStatementNoShortIf(self)




    def labeledStatementNoShortIf(self):

        localctx = JavaParser.LabeledStatementNoShortIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_labeledStatementNoShortIf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 740
            self.match(JavaParser.ID)
            self.state = 741
            self.match(JavaParser.DOIS_PONTOS)
            self.state = 742
            self.statementNoShortIf()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementExpression(self):
            return self.getTypedRuleContext(JavaParser.StatementExpressionContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)




    def expressionStatement(self):

        localctx = JavaParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 744
            self.statementExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment(self):
            return self.getTypedRuleContext(JavaParser.AssignmentContext,0)


        def preIncrementExpression(self):
            return self.getTypedRuleContext(JavaParser.PreIncrementExpressionContext,0)


        def postincrementExpression(self):
            return self.getTypedRuleContext(JavaParser.PostincrementExpressionContext,0)


        def preDecrementExpression(self):
            return self.getTypedRuleContext(JavaParser.PreDecrementExpressionContext,0)


        def postdecrementExpression(self):
            return self.getTypedRuleContext(JavaParser.PostdecrementExpressionContext,0)


        def methodInvocation(self):
            return self.getTypedRuleContext(JavaParser.MethodInvocationContext,0)


        def classInstanceCreationExpression(self):
            return self.getTypedRuleContext(JavaParser.ClassInstanceCreationExpressionContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_statementExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementExpression" ):
                listener.enterStatementExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementExpression" ):
                listener.exitStatementExpression(self)




    def statementExpression(self):

        localctx = JavaParser.StatementExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_statementExpression)
        try:
            self.state = 753
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 746
                self.assignment()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 747
                self.preIncrementExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 748
                self.postincrementExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 749
                self.preDecrementExpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 750
                self.postdecrementExpression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 751
                self.methodInvocation()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 752
                self.classInstanceCreationExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfThenStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(JavaParser.IF, 0)

        def AP(self):
            return self.getToken(JavaParser.AP, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def FP(self):
            return self.getToken(JavaParser.FP, 0)

        def statement(self):
            return self.getTypedRuleContext(JavaParser.StatementContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_ifThenStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfThenStatement" ):
                listener.enterIfThenStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfThenStatement" ):
                listener.exitIfThenStatement(self)




    def ifThenStatement(self):

        localctx = JavaParser.IfThenStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_ifThenStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.match(JavaParser.IF)
            self.state = 756
            self.match(JavaParser.AP)
            self.state = 757
            self.expression()
            self.state = 758
            self.match(JavaParser.FP)
            self.state = 759
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfThenElseStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(JavaParser.IF, 0)

        def AP(self):
            return self.getToken(JavaParser.AP, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def FP(self):
            return self.getToken(JavaParser.FP, 0)

        def statementNoShortIf(self):
            return self.getTypedRuleContext(JavaParser.StatementNoShortIfContext,0)


        def ELSE(self):
            return self.getToken(JavaParser.ELSE, 0)

        def statement(self):
            return self.getTypedRuleContext(JavaParser.StatementContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_ifThenElseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfThenElseStatement" ):
                listener.enterIfThenElseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfThenElseStatement" ):
                listener.exitIfThenElseStatement(self)




    def ifThenElseStatement(self):

        localctx = JavaParser.IfThenElseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_ifThenElseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 761
            self.match(JavaParser.IF)
            self.state = 762
            self.match(JavaParser.AP)
            self.state = 763
            self.expression()
            self.state = 764
            self.match(JavaParser.FP)
            self.state = 765
            self.statementNoShortIf()
            self.state = 766
            self.match(JavaParser.ELSE)
            self.state = 767
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfThenElseStatementNoShortIfContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(JavaParser.IF, 0)

        def AP(self):
            return self.getToken(JavaParser.AP, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def FP(self):
            return self.getToken(JavaParser.FP, 0)

        def statementNoShortIf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.StatementNoShortIfContext)
            else:
                return self.getTypedRuleContext(JavaParser.StatementNoShortIfContext,i)


        def ELSE(self):
            return self.getToken(JavaParser.ELSE, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_ifThenElseStatementNoShortIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfThenElseStatementNoShortIf" ):
                listener.enterIfThenElseStatementNoShortIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfThenElseStatementNoShortIf" ):
                listener.exitIfThenElseStatementNoShortIf(self)




    def ifThenElseStatementNoShortIf(self):

        localctx = JavaParser.IfThenElseStatementNoShortIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_ifThenElseStatementNoShortIf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 769
            self.match(JavaParser.IF)
            self.state = 770
            self.match(JavaParser.AP)
            self.state = 771
            self.expression()
            self.state = 772
            self.match(JavaParser.FP)
            self.state = 773
            self.statementNoShortIf()
            self.state = 774
            self.match(JavaParser.ELSE)
            self.state = 775
            self.statementNoShortIf()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SwitchStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SWITCH(self):
            return self.getToken(JavaParser.SWITCH, 0)

        def AP(self):
            return self.getToken(JavaParser.AP, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def FP(self):
            return self.getToken(JavaParser.FP, 0)

        def switchBlock(self):
            return self.getTypedRuleContext(JavaParser.SwitchBlockContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_switchStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchStatement" ):
                listener.enterSwitchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchStatement" ):
                listener.exitSwitchStatement(self)




    def switchStatement(self):

        localctx = JavaParser.SwitchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_switchStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 777
            self.match(JavaParser.SWITCH)
            self.state = 778
            self.match(JavaParser.AP)
            self.state = 779
            self.expression()
            self.state = 780
            self.match(JavaParser.FP)
            self.state = 781
            self.switchBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SwitchBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACH(self):
            return self.getToken(JavaParser.ACH, 0)

        def FCH(self):
            return self.getToken(JavaParser.FCH, 0)

        def switchBlockStatementGroups(self):
            return self.getTypedRuleContext(JavaParser.SwitchBlockStatementGroupsContext,0)


        def switchLabels(self):
            return self.getTypedRuleContext(JavaParser.SwitchLabelsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_switchBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchBlock" ):
                listener.enterSwitchBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchBlock" ):
                listener.exitSwitchBlock(self)




    def switchBlock(self):

        localctx = JavaParser.SwitchBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_switchBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 783
            self.match(JavaParser.ACH)
            self.state = 785
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 784
                self.switchBlockStatementGroups()


            self.state = 788
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.CASE or _la==JavaParser.DEFAULT:
                self.state = 787
                self.switchLabels()


            self.state = 790
            self.match(JavaParser.FCH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SwitchBlockStatementGroupsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switchBlockStatementGroup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.SwitchBlockStatementGroupContext)
            else:
                return self.getTypedRuleContext(JavaParser.SwitchBlockStatementGroupContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_switchBlockStatementGroups

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchBlockStatementGroups" ):
                listener.enterSwitchBlockStatementGroups(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchBlockStatementGroups" ):
                listener.exitSwitchBlockStatementGroups(self)




    def switchBlockStatementGroups(self):

        localctx = JavaParser.SwitchBlockStatementGroupsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_switchBlockStatementGroups)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 792
                    self.switchBlockStatementGroup()

                else:
                    raise NoViableAltException(self)
                self.state = 795 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SwitchBlockStatementGroupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switchLabels(self):
            return self.getTypedRuleContext(JavaParser.SwitchLabelsContext,0)


        def blockStatements(self):
            return self.getTypedRuleContext(JavaParser.BlockStatementsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_switchBlockStatementGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchBlockStatementGroup" ):
                listener.enterSwitchBlockStatementGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchBlockStatementGroup" ):
                listener.exitSwitchBlockStatementGroup(self)




    def switchBlockStatementGroup(self):

        localctx = JavaParser.SwitchBlockStatementGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_switchBlockStatementGroup)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 797
            self.switchLabels()
            self.state = 798
            self.blockStatements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SwitchLabelsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switchLabel(self):
            return self.getTypedRuleContext(JavaParser.SwitchLabelContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_switchLabels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchLabels" ):
                listener.enterSwitchLabels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchLabels" ):
                listener.exitSwitchLabels(self)




    def switchLabels(self):

        localctx = JavaParser.SwitchLabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_switchLabels)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            self.switchLabel()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SwitchLabelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.CASE)
            else:
                return self.getToken(JavaParser.CASE, i)

        def constantExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ConstantExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ConstantExpressionContext,i)


        def DOIS_PONTOS(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOIS_PONTOS)
            else:
                return self.getToken(JavaParser.DOIS_PONTOS, i)

        def DEFAULT(self):
            return self.getToken(JavaParser.DEFAULT, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_switchLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchLabel" ):
                listener.enterSwitchLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchLabel" ):
                listener.exitSwitchLabel(self)




    def switchLabel(self):

        localctx = JavaParser.SwitchLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_switchLabel)
        self._la = 0 # Token type
        try:
            self.state = 812
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.CASE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 806 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 802
                    self.match(JavaParser.CASE)
                    self.state = 803
                    self.constantExpression()
                    self.state = 804
                    self.match(JavaParser.DOIS_PONTOS)
                    self.state = 808 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==JavaParser.CASE):
                        break

                pass
            elif token in [JavaParser.DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 810
                self.match(JavaParser.DEFAULT)
                self.state = 811
                self.match(JavaParser.DOIS_PONTOS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhileStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(JavaParser.WHILE, 0)

        def AP(self):
            return self.getToken(JavaParser.AP, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def FP(self):
            return self.getToken(JavaParser.FP, 0)

        def statement(self):
            return self.getTypedRuleContext(JavaParser.StatementContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)




    def whileStatement(self):

        localctx = JavaParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 814
            self.match(JavaParser.WHILE)
            self.state = 815
            self.match(JavaParser.AP)
            self.state = 816
            self.expression()
            self.state = 817
            self.match(JavaParser.FP)
            self.state = 818
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhileStatementNoShortIfContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(JavaParser.WHILE, 0)

        def AP(self):
            return self.getToken(JavaParser.AP, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def FP(self):
            return self.getToken(JavaParser.FP, 0)

        def statementNoShortIf(self):
            return self.getTypedRuleContext(JavaParser.StatementNoShortIfContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_whileStatementNoShortIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatementNoShortIf" ):
                listener.enterWhileStatementNoShortIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatementNoShortIf" ):
                listener.exitWhileStatementNoShortIf(self)




    def whileStatementNoShortIf(self):

        localctx = JavaParser.WhileStatementNoShortIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_whileStatementNoShortIf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 820
            self.match(JavaParser.WHILE)
            self.state = 821
            self.match(JavaParser.AP)
            self.state = 822
            self.expression()
            self.state = 823
            self.match(JavaParser.FP)
            self.state = 824
            self.statementNoShortIf()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DoStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(JavaParser.DO, 0)

        def statement(self):
            return self.getTypedRuleContext(JavaParser.StatementContext,0)


        def WHILE(self):
            return self.getToken(JavaParser.WHILE, 0)

        def AP(self):
            return self.getToken(JavaParser.AP, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def FP(self):
            return self.getToken(JavaParser.FP, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_doStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoStatement" ):
                listener.enterDoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoStatement" ):
                listener.exitDoStatement(self)




    def doStatement(self):

        localctx = JavaParser.DoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_doStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 826
            self.match(JavaParser.DO)
            self.state = 827
            self.statement()
            self.state = 828
            self.match(JavaParser.WHILE)
            self.state = 829
            self.match(JavaParser.AP)
            self.state = 830
            self.expression()
            self.state = 831
            self.match(JavaParser.FP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(JavaParser.FOR, 0)

        def AP(self):
            return self.getToken(JavaParser.AP, 0)

        def PONTOV(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.PONTOV)
            else:
                return self.getToken(JavaParser.PONTOV, i)

        def FP(self):
            return self.getToken(JavaParser.FP, 0)

        def statement(self):
            return self.getTypedRuleContext(JavaParser.StatementContext,0)


        def forInit(self):
            return self.getTypedRuleContext(JavaParser.ForInitContext,0)


        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def forUpdate(self):
            return self.getTypedRuleContext(JavaParser.ForUpdateContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)




    def forStatement(self):

        localctx = JavaParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_forStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 833
            self.match(JavaParser.FOR)
            self.state = 834
            self.match(JavaParser.AP)
            self.state = 836
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.HEX_NUMERAL) | (1 << JavaParser.OCTAL_NUMERAL) | (1 << JavaParser.NUMERO) | (1 << JavaParser.SHORT) | (1 << JavaParser.BYTE) | (1 << JavaParser.INT) | (1 << JavaParser.LONG) | (1 << JavaParser.CHAR) | (1 << JavaParser.FLOAT) | (1 << JavaParser.LOGICAL) | (1 << JavaParser.NEW) | (1 << JavaParser.EXTENDS) | (1 << JavaParser.THIS) | (1 << JavaParser.SUPER) | (1 << JavaParser.INC) | (1 << JavaParser.DEC))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (JavaParser.AP - 76)) | (1 << (JavaParser.ASPAS - 76)) | (1 << (JavaParser.STRING - 76)) | (1 << (JavaParser.ID - 76)) | (1 << (JavaParser.DIGITO - 76)) | (1 << (JavaParser.NULL - 76)))) != 0):
                self.state = 835
                self.forInit()


            self.state = 838
            self.match(JavaParser.PONTOV)
            self.state = 840
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.HEX_NUMERAL) | (1 << JavaParser.OCTAL_NUMERAL) | (1 << JavaParser.NUMERO) | (1 << JavaParser.LOGICAL) | (1 << JavaParser.NEW) | (1 << JavaParser.EXTENDS) | (1 << JavaParser.THIS) | (1 << JavaParser.ADD) | (1 << JavaParser.SUB) | (1 << JavaParser.INC) | (1 << JavaParser.DEC))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (JavaParser.AP - 76)) | (1 << (JavaParser.EXCLAMACAO - 76)) | (1 << (JavaParser.NOT - 76)) | (1 << (JavaParser.ASPAS - 76)) | (1 << (JavaParser.STRING - 76)) | (1 << (JavaParser.ID - 76)) | (1 << (JavaParser.DIGITO - 76)) | (1 << (JavaParser.NULL - 76)))) != 0):
                self.state = 839
                self.expression()


            self.state = 842
            self.match(JavaParser.PONTOV)
            self.state = 844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.HEX_NUMERAL) | (1 << JavaParser.OCTAL_NUMERAL) | (1 << JavaParser.NUMERO) | (1 << JavaParser.LOGICAL) | (1 << JavaParser.NEW) | (1 << JavaParser.EXTENDS) | (1 << JavaParser.THIS) | (1 << JavaParser.SUPER) | (1 << JavaParser.INC) | (1 << JavaParser.DEC))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (JavaParser.AP - 76)) | (1 << (JavaParser.ASPAS - 76)) | (1 << (JavaParser.STRING - 76)) | (1 << (JavaParser.ID - 76)) | (1 << (JavaParser.DIGITO - 76)) | (1 << (JavaParser.NULL - 76)))) != 0):
                self.state = 843
                self.forUpdate()


            self.state = 846
            self.match(JavaParser.FP)
            self.state = 847
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForStatementNoShortIfContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(JavaParser.FOR, 0)

        def AP(self):
            return self.getToken(JavaParser.AP, 0)

        def PONTOV(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.PONTOV)
            else:
                return self.getToken(JavaParser.PONTOV, i)

        def FP(self):
            return self.getToken(JavaParser.FP, 0)

        def statementNoShortIf(self):
            return self.getTypedRuleContext(JavaParser.StatementNoShortIfContext,0)


        def forInit(self):
            return self.getTypedRuleContext(JavaParser.ForInitContext,0)


        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def forUpdate(self):
            return self.getTypedRuleContext(JavaParser.ForUpdateContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_forStatementNoShortIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatementNoShortIf" ):
                listener.enterForStatementNoShortIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatementNoShortIf" ):
                listener.exitForStatementNoShortIf(self)




    def forStatementNoShortIf(self):

        localctx = JavaParser.ForStatementNoShortIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_forStatementNoShortIf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 849
            self.match(JavaParser.FOR)
            self.state = 850
            self.match(JavaParser.AP)
            self.state = 852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.HEX_NUMERAL) | (1 << JavaParser.OCTAL_NUMERAL) | (1 << JavaParser.NUMERO) | (1 << JavaParser.SHORT) | (1 << JavaParser.BYTE) | (1 << JavaParser.INT) | (1 << JavaParser.LONG) | (1 << JavaParser.CHAR) | (1 << JavaParser.FLOAT) | (1 << JavaParser.LOGICAL) | (1 << JavaParser.NEW) | (1 << JavaParser.EXTENDS) | (1 << JavaParser.THIS) | (1 << JavaParser.SUPER) | (1 << JavaParser.INC) | (1 << JavaParser.DEC))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (JavaParser.AP - 76)) | (1 << (JavaParser.ASPAS - 76)) | (1 << (JavaParser.STRING - 76)) | (1 << (JavaParser.ID - 76)) | (1 << (JavaParser.DIGITO - 76)) | (1 << (JavaParser.NULL - 76)))) != 0):
                self.state = 851
                self.forInit()


            self.state = 854
            self.match(JavaParser.PONTOV)
            self.state = 856
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.HEX_NUMERAL) | (1 << JavaParser.OCTAL_NUMERAL) | (1 << JavaParser.NUMERO) | (1 << JavaParser.LOGICAL) | (1 << JavaParser.NEW) | (1 << JavaParser.EXTENDS) | (1 << JavaParser.THIS) | (1 << JavaParser.ADD) | (1 << JavaParser.SUB) | (1 << JavaParser.INC) | (1 << JavaParser.DEC))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (JavaParser.AP - 76)) | (1 << (JavaParser.EXCLAMACAO - 76)) | (1 << (JavaParser.NOT - 76)) | (1 << (JavaParser.ASPAS - 76)) | (1 << (JavaParser.STRING - 76)) | (1 << (JavaParser.ID - 76)) | (1 << (JavaParser.DIGITO - 76)) | (1 << (JavaParser.NULL - 76)))) != 0):
                self.state = 855
                self.expression()


            self.state = 858
            self.match(JavaParser.PONTOV)
            self.state = 860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.HEX_NUMERAL) | (1 << JavaParser.OCTAL_NUMERAL) | (1 << JavaParser.NUMERO) | (1 << JavaParser.LOGICAL) | (1 << JavaParser.NEW) | (1 << JavaParser.EXTENDS) | (1 << JavaParser.THIS) | (1 << JavaParser.SUPER) | (1 << JavaParser.INC) | (1 << JavaParser.DEC))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (JavaParser.AP - 76)) | (1 << (JavaParser.ASPAS - 76)) | (1 << (JavaParser.STRING - 76)) | (1 << (JavaParser.ID - 76)) | (1 << (JavaParser.DIGITO - 76)) | (1 << (JavaParser.NULL - 76)))) != 0):
                self.state = 859
                self.forUpdate()


            self.state = 862
            self.match(JavaParser.FP)
            self.state = 863
            self.statementNoShortIf()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForInitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementExpressionList(self):
            return self.getTypedRuleContext(JavaParser.StatementExpressionListContext,0)


        def localVariableDeclaration(self):
            return self.getTypedRuleContext(JavaParser.LocalVariableDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_forInit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInit" ):
                listener.enterForInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInit" ):
                listener.exitForInit(self)




    def forInit(self):

        localctx = JavaParser.ForInitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_forInit)
        try:
            self.state = 867
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 865
                self.statementExpressionList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 866
                self.localVariableDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForUpdateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementExpressionList(self):
            return self.getTypedRuleContext(JavaParser.StatementExpressionListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_forUpdate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForUpdate" ):
                listener.enterForUpdate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForUpdate" ):
                listener.exitForUpdate(self)




    def forUpdate(self):

        localctx = JavaParser.ForUpdateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_forUpdate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 869
            self.statementExpressionList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementExpressionListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.StatementExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.StatementExpressionContext,i)


        def VIRGULA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.VIRGULA)
            else:
                return self.getToken(JavaParser.VIRGULA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_statementExpressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementExpressionList" ):
                listener.enterStatementExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementExpressionList" ):
                listener.exitStatementExpressionList(self)




    def statementExpressionList(self):

        localctx = JavaParser.StatementExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_statementExpressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            self.statementExpression()
            self.state = 876
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParser.VIRGULA:
                self.state = 872
                self.match(JavaParser.VIRGULA)
                self.state = 873
                self.statementExpression()
                self.state = 878
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BreakStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(JavaParser.BREAK, 0)

        def ID(self):
            return self.getToken(JavaParser.ID, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)




    def breakStatement(self):

        localctx = JavaParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_breakStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 879
            self.match(JavaParser.BREAK)
            self.state = 881
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 880
                self.match(JavaParser.ID)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ContinueStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(JavaParser.CONTINUE, 0)

        def ID(self):
            return self.getToken(JavaParser.ID, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)




    def continueStatement(self):

        localctx = JavaParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 883
            self.match(JavaParser.CONTINUE)
            self.state = 885
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 884
                self.match(JavaParser.ID)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(JavaParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)




    def returnStatement(self):

        localctx = JavaParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_returnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 887
            self.match(JavaParser.RETURN)
            self.state = 889
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.state = 888
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ThrowsRuleStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROW(self):
            return self.getToken(JavaParser.THROW, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_throwsRuleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowsRuleStatement" ):
                listener.enterThrowsRuleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowsRuleStatement" ):
                listener.exitThrowsRuleStatement(self)




    def throwsRuleStatement(self):

        localctx = JavaParser.ThrowsRuleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_throwsRuleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 891
            self.match(JavaParser.THROW)
            self.state = 892
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SynchronizedStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYNCHRONIZED(self):
            return self.getToken(JavaParser.SYNCHRONIZED, 0)

        def AP(self):
            return self.getToken(JavaParser.AP, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def FP(self):
            return self.getToken(JavaParser.FP, 0)

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_synchronizedStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSynchronizedStatement" ):
                listener.enterSynchronizedStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSynchronizedStatement" ):
                listener.exitSynchronizedStatement(self)




    def synchronizedStatement(self):

        localctx = JavaParser.SynchronizedStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_synchronizedStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 894
            self.match(JavaParser.SYNCHRONIZED)
            self.state = 895
            self.match(JavaParser.AP)
            self.state = 896
            self.expression()
            self.state = 897
            self.match(JavaParser.FP)
            self.state = 898
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TryStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(JavaParser.TRY, 0)

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def catches(self):
            return self.getTypedRuleContext(JavaParser.CatchesContext,0)


        def finallyRule(self):
            return self.getTypedRuleContext(JavaParser.FinallyRuleContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_tryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStatement" ):
                listener.enterTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStatement" ):
                listener.exitTryStatement(self)




    def tryStatement(self):

        localctx = JavaParser.TryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_tryStatement)
        self._la = 0 # Token type
        try:
            self.state = 911
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 900
                self.match(JavaParser.TRY)
                self.state = 901
                self.block()
                self.state = 902
                self.catches()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 904
                self.match(JavaParser.TRY)
                self.state = 905
                self.block()
                self.state = 907
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==JavaParser.CATCH:
                    self.state = 906
                    self.catches()


                self.state = 909
                self.finallyRule()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CatchesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def catchClause(self):
            return self.getTypedRuleContext(JavaParser.CatchClauseContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_catches

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatches" ):
                listener.enterCatches(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatches" ):
                listener.exitCatches(self)




    def catches(self):

        localctx = JavaParser.CatchesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_catches)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 913
            self.catchClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CatchClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.CATCH)
            else:
                return self.getToken(JavaParser.CATCH, i)

        def AP(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.AP)
            else:
                return self.getToken(JavaParser.AP, i)

        def formalParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.FormalParameterContext)
            else:
                return self.getTypedRuleContext(JavaParser.FormalParameterContext,i)


        def FP(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.FP)
            else:
                return self.getToken(JavaParser.FP, i)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.BlockContext)
            else:
                return self.getTypedRuleContext(JavaParser.BlockContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_catchClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchClause" ):
                listener.enterCatchClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchClause" ):
                listener.exitCatchClause(self)




    def catchClause(self):

        localctx = JavaParser.CatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_catchClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 921 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 915
                self.match(JavaParser.CATCH)
                self.state = 916
                self.match(JavaParser.AP)
                self.state = 917
                self.formalParameter()
                self.state = 918
                self.match(JavaParser.FP)
                self.state = 919
                self.block()
                self.state = 923 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==JavaParser.CATCH):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FinallyRuleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(JavaParser.FINALLY, 0)

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_finallyRule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinallyRule" ):
                listener.enterFinallyRule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinallyRule" ):
                listener.exitFinallyRule(self)




    def finallyRule(self):

        localctx = JavaParser.FinallyRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_finallyRule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 925
            self.match(JavaParser.FINALLY)
            self.state = 926
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_constantExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpression" ):
                listener.enterConstantExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpression" ):
                listener.exitConstantExpression(self)




    def constantExpression(self):

        localctx = JavaParser.ConstantExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_constantExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 928
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self):
            return self.getTypedRuleContext(JavaParser.AssignmentExpressionContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = JavaParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 930
            self.assignmentExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(JavaParser.ConditionalExpressionContext,0)


        def assignment(self):
            return self.getTypedRuleContext(JavaParser.AssignmentContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_assignmentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentExpression" ):
                listener.enterAssignmentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentExpression" ):
                listener.exitAssignmentExpression(self)




    def assignmentExpression(self):

        localctx = JavaParser.AssignmentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_assignmentExpression)
        try:
            self.state = 934
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 932
                self.conditionalExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 933
                self.assignment()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def leftHandSide(self):
            return self.getTypedRuleContext(JavaParser.LeftHandSideContext,0)


        def assignmentOperator(self):
            return self.getTypedRuleContext(JavaParser.AssignmentOperatorContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(JavaParser.AssignmentExpressionContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)




    def assignment(self):

        localctx = JavaParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 936
            self.leftHandSide()
            self.state = 937
            self.assignmentOperator()
            self.state = 938
            self.assignmentExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LeftHandSideContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionName(self):
            return self.getTypedRuleContext(JavaParser.ExpressionNameContext,0)


        def fieldAccess(self):
            return self.getTypedRuleContext(JavaParser.FieldAccessContext,0)


        def arrayAccess(self):
            return self.getTypedRuleContext(JavaParser.ArrayAccessContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_leftHandSide

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLeftHandSide" ):
                listener.enterLeftHandSide(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLeftHandSide" ):
                listener.exitLeftHandSide(self)




    def leftHandSide(self):

        localctx = JavaParser.LeftHandSideContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_leftHandSide)
        try:
            self.state = 943
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 940
                self.expressionName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 941
                self.fieldAccess()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 942
                self.arrayAccess()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IGUAL_ATRIB(self):
            return self.getToken(JavaParser.IGUAL_ATRIB, 0)

        def MULT_ATRIB(self):
            return self.getToken(JavaParser.MULT_ATRIB, 0)

        def DIV_ATRIB(self):
            return self.getToken(JavaParser.DIV_ATRIB, 0)

        def MOD_ATRIB(self):
            return self.getToken(JavaParser.MOD_ATRIB, 0)

        def ADD_ATRIB(self):
            return self.getToken(JavaParser.ADD_ATRIB, 0)

        def BIT_LEFT_ATRIB(self):
            return self.getToken(JavaParser.BIT_LEFT_ATRIB, 0)

        def BIT_RIGHT_ATRIB(self):
            return self.getToken(JavaParser.BIT_RIGHT_ATRIB, 0)

        def U_BIT_RIGHT_ATRIB(self):
            return self.getToken(JavaParser.U_BIT_RIGHT_ATRIB, 0)

        def AND_ATRIB(self):
            return self.getToken(JavaParser.AND_ATRIB, 0)

        def XOR_ATRIB(self):
            return self.getToken(JavaParser.XOR_ATRIB, 0)

        def OR_ATRIB(self):
            return self.getToken(JavaParser.OR_ATRIB, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)




    def assignmentOperator(self):

        localctx = JavaParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 945
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.IGUAL_ATRIB) | (1 << JavaParser.MULT_ATRIB) | (1 << JavaParser.DIV_ATRIB) | (1 << JavaParser.MOD_ATRIB) | (1 << JavaParser.ADD_ATRIB) | (1 << JavaParser.BIT_LEFT_ATRIB) | (1 << JavaParser.BIT_RIGHT_ATRIB) | (1 << JavaParser.U_BIT_RIGHT_ATRIB) | (1 << JavaParser.AND_ATRIB) | (1 << JavaParser.XOR_ATRIB) | (1 << JavaParser.OR_ATRIB))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionalExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalOrExpression(self):
            return self.getTypedRuleContext(JavaParser.ConditionalOrExpressionContext,0)


        def INTERROGACAO(self):
            return self.getToken(JavaParser.INTERROGACAO, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def DOIS_PONTOS(self):
            return self.getToken(JavaParser.DOIS_PONTOS, 0)

        def conditionalExpression(self):
            return self.getTypedRuleContext(JavaParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_conditionalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalExpression" ):
                listener.enterConditionalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalExpression" ):
                listener.exitConditionalExpression(self)




    def conditionalExpression(self):

        localctx = JavaParser.ConditionalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_conditionalExpression)
        try:
            self.state = 954
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 947
                self.conditionalOrExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 948
                self.conditionalOrExpression()
                self.state = 949
                self.match(JavaParser.INTERROGACAO)
                self.state = 950
                self.expression()
                self.state = 951
                self.match(JavaParser.DOIS_PONTOS)
                self.state = 952
                self.conditionalExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionalOrExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalAndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ConditionalAndExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ConditionalAndExpressionContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.OR)
            else:
                return self.getToken(JavaParser.OR, i)

        def getRuleIndex(self):
            return JavaParser.RULE_conditionalOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalOrExpression" ):
                listener.enterConditionalOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalOrExpression" ):
                listener.exitConditionalOrExpression(self)




    def conditionalOrExpression(self):

        localctx = JavaParser.ConditionalOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_conditionalOrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 956
            self.conditionalAndExpression()
            self.state = 961
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,86,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 957
                    self.match(JavaParser.OR)
                    self.state = 958
                    self.conditionalAndExpression() 
                self.state = 963
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionalAndExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusiveOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.InclusiveOrExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.InclusiveOrExpressionContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.AND)
            else:
                return self.getToken(JavaParser.AND, i)

        def getRuleIndex(self):
            return JavaParser.RULE_conditionalAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalAndExpression" ):
                listener.enterConditionalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalAndExpression" ):
                listener.exitConditionalAndExpression(self)




    def conditionalAndExpression(self):

        localctx = JavaParser.ConditionalAndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_conditionalAndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 964
            self.inclusiveOrExpression()
            self.state = 969
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 965
                    self.match(JavaParser.AND)
                    self.state = 966
                    self.inclusiveOrExpression() 
                self.state = 971
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InclusiveOrExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusiveOrExpression(self):
            return self.getTypedRuleContext(JavaParser.ExclusiveOrExpressionContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_inclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusiveOrExpression" ):
                listener.enterInclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusiveOrExpression" ):
                listener.exitInclusiveOrExpression(self)




    def inclusiveOrExpression(self):

        localctx = JavaParser.InclusiveOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_inclusiveOrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 972
            self.exclusiveOrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExclusiveOrExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AndExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.AndExpressionContext,i)


        def CARET(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.CARET)
            else:
                return self.getToken(JavaParser.CARET, i)

        def getRuleIndex(self):
            return JavaParser.RULE_exclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusiveOrExpression" ):
                listener.enterExclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusiveOrExpression" ):
                listener.exitExclusiveOrExpression(self)




    def exclusiveOrExpression(self):

        localctx = JavaParser.ExclusiveOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_exclusiveOrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 974
            self.andExpression()
            self.state = 979
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,88,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 975
                    self.match(JavaParser.CARET)
                    self.state = 976
                    self.andExpression() 
                self.state = 981
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AndExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.EqualityExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.EqualityExpressionContext,i)


        def BITAND(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.BITAND)
            else:
                return self.getToken(JavaParser.BITAND, i)

        def getRuleIndex(self):
            return JavaParser.RULE_andExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpression" ):
                listener.enterAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpression" ):
                listener.exitAndExpression(self)




    def andExpression(self):

        localctx = JavaParser.AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_andExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 982
            self.equalityExpression(0)
            self.state = 987
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 983
                    self.match(JavaParser.BITAND)
                    self.state = 984
                    self.equalityExpression(0) 
                self.state = 989
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EqualityExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalExpression(self):
            return self.getTypedRuleContext(JavaParser.RelationalExpressionContext,0)


        def equalityExpression(self):
            return self.getTypedRuleContext(JavaParser.EqualityExpressionContext,0)


        def IGUAL(self):
            return self.getToken(JavaParser.IGUAL, 0)

        def DIF(self):
            return self.getToken(JavaParser.DIF, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_equalityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)



    def equalityExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JavaParser.EqualityExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 226
        self.enterRecursionRule(localctx, 226, self.RULE_equalityExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 991
            self.relationalExpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1001
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 999
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                    if la_ == 1:
                        localctx = JavaParser.EqualityExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityExpression)
                        self.state = 993
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 994
                        self.match(JavaParser.IGUAL)
                        self.state = 995
                        self.relationalExpression()
                        pass

                    elif la_ == 2:
                        localctx = JavaParser.EqualityExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityExpression)
                        self.state = 996
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 997
                        self.match(JavaParser.DIF)
                        self.state = 998
                        self.relationalExpression()
                        pass

             
                self.state = 1003
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class RelationalExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ShiftExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ShiftExpressionContext,i)


        def MENOR(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.MENOR)
            else:
                return self.getToken(JavaParser.MENOR, i)

        def MAIOR(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.MAIOR)
            else:
                return self.getToken(JavaParser.MAIOR, i)

        def MENOR_IGUAL(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.MENOR_IGUAL)
            else:
                return self.getToken(JavaParser.MENOR_IGUAL, i)

        def MAIOR_IGUAL(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.MAIOR_IGUAL)
            else:
                return self.getToken(JavaParser.MAIOR_IGUAL, i)

        def INSTANCEOF(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.INSTANCEOF)
            else:
                return self.getToken(JavaParser.INSTANCEOF, i)

        def referenceType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ReferenceTypeContext)
            else:
                return self.getTypedRuleContext(JavaParser.ReferenceTypeContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_relationalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalExpression" ):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalExpression" ):
                listener.exitRelationalExpression(self)




    def relationalExpression(self):

        localctx = JavaParser.RelationalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_relationalExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1004
            self.shiftExpression()
            self.state = 1017
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,93,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1015
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [JavaParser.MENOR]:
                        self.state = 1005
                        self.match(JavaParser.MENOR)
                        self.state = 1006
                        self.shiftExpression()
                        pass
                    elif token in [JavaParser.MAIOR]:
                        self.state = 1007
                        self.match(JavaParser.MAIOR)
                        self.state = 1008
                        self.shiftExpression()
                        pass
                    elif token in [JavaParser.MENOR_IGUAL]:
                        self.state = 1009
                        self.match(JavaParser.MENOR_IGUAL)
                        self.state = 1010
                        self.shiftExpression()
                        pass
                    elif token in [JavaParser.MAIOR_IGUAL]:
                        self.state = 1011
                        self.match(JavaParser.MAIOR_IGUAL)
                        self.state = 1012
                        self.shiftExpression()
                        pass
                    elif token in [JavaParser.INSTANCEOF]:
                        self.state = 1013
                        self.match(JavaParser.INSTANCEOF)
                        self.state = 1014
                        self.referenceType()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1019
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,93,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShiftExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AdditiveExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.AdditiveExpressionContext,i)


        def SHIFT_LEFT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.SHIFT_LEFT)
            else:
                return self.getToken(JavaParser.SHIFT_LEFT, i)

        def SHIFT_RIGHT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.SHIFT_RIGHT)
            else:
                return self.getToken(JavaParser.SHIFT_RIGHT, i)

        def U_SHIFT_RIGHT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.U_SHIFT_RIGHT)
            else:
                return self.getToken(JavaParser.U_SHIFT_RIGHT, i)

        def getRuleIndex(self):
            return JavaParser.RULE_shiftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftExpression" ):
                listener.enterShiftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftExpression" ):
                listener.exitShiftExpression(self)




    def shiftExpression(self):

        localctx = JavaParser.ShiftExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_shiftExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1020
            self.additiveExpression()
            self.state = 1029
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,95,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1027
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [JavaParser.SHIFT_LEFT]:
                        self.state = 1021
                        self.match(JavaParser.SHIFT_LEFT)
                        self.state = 1022
                        self.additiveExpression()
                        pass
                    elif token in [JavaParser.SHIFT_RIGHT]:
                        self.state = 1023
                        self.match(JavaParser.SHIFT_RIGHT)
                        self.state = 1024
                        self.additiveExpression()
                        pass
                    elif token in [JavaParser.U_SHIFT_RIGHT]:
                        self.state = 1025
                        self.match(JavaParser.U_SHIFT_RIGHT)
                        self.state = 1026
                        self.additiveExpression()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1031
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AdditiveExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.MultiplicativeExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.MultiplicativeExpressionContext,i)


        def ADD(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.ADD)
            else:
                return self.getToken(JavaParser.ADD, i)

        def SUB(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.SUB)
            else:
                return self.getToken(JavaParser.SUB, i)

        def getRuleIndex(self):
            return JavaParser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)




    def additiveExpression(self):

        localctx = JavaParser.AdditiveExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_additiveExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1032
            self.multiplicativeExpression()
            self.state = 1039
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1037
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [JavaParser.ADD]:
                        self.state = 1033
                        self.match(JavaParser.ADD)
                        self.state = 1034
                        self.multiplicativeExpression()
                        pass
                    elif token in [JavaParser.SUB]:
                        self.state = 1035
                        self.match(JavaParser.SUB)
                        self.state = 1036
                        self.multiplicativeExpression()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1041
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultiplicativeExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.UnaryExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.UnaryExpressionContext,i)


        def MULT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.MULT)
            else:
                return self.getToken(JavaParser.MULT, i)

        def DIV(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DIV)
            else:
                return self.getToken(JavaParser.DIV, i)

        def MOD(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.MOD)
            else:
                return self.getToken(JavaParser.MOD, i)

        def getRuleIndex(self):
            return JavaParser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)




    def multiplicativeExpression(self):

        localctx = JavaParser.MultiplicativeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_multiplicativeExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1042
            self.unaryExpression()
            self.state = 1051
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1049
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [JavaParser.MULT]:
                        self.state = 1043
                        self.match(JavaParser.MULT)
                        self.state = 1044
                        self.unaryExpression()
                        pass
                    elif token in [JavaParser.DIV]:
                        self.state = 1045
                        self.match(JavaParser.DIV)
                        self.state = 1046
                        self.unaryExpression()
                        pass
                    elif token in [JavaParser.MOD]:
                        self.state = 1047
                        self.match(JavaParser.MOD)
                        self.state = 1048
                        self.unaryExpression()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1053
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CastExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AP(self):
            return self.getToken(JavaParser.AP, 0)

        def primitiveType(self):
            return self.getTypedRuleContext(JavaParser.PrimitiveTypeContext,0)


        def FP(self):
            return self.getToken(JavaParser.FP, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(JavaParser.UnaryExpressionContext,0)


        def referenceType(self):
            return self.getTypedRuleContext(JavaParser.ReferenceTypeContext,0)


        def unaryExpressionNotPlusMinus(self):
            return self.getTypedRuleContext(JavaParser.UnaryExpressionNotPlusMinusContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_castExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpression" ):
                listener.enterCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpression" ):
                listener.exitCastExpression(self)




    def castExpression(self):

        localctx = JavaParser.CastExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_castExpression)
        try:
            self.state = 1064
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1054
                self.match(JavaParser.AP)
                self.state = 1055
                self.primitiveType()
                self.state = 1056
                self.match(JavaParser.FP)
                self.state = 1057
                self.unaryExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1059
                self.match(JavaParser.AP)
                self.state = 1060
                self.referenceType()
                self.state = 1061
                self.match(JavaParser.FP)
                self.state = 1062
                self.unaryExpressionNotPlusMinus()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def preIncrementExpression(self):
            return self.getTypedRuleContext(JavaParser.PreIncrementExpressionContext,0)


        def preDecrementExpression(self):
            return self.getTypedRuleContext(JavaParser.PreDecrementExpressionContext,0)


        def ADD(self):
            return self.getToken(JavaParser.ADD, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(JavaParser.UnaryExpressionContext,0)


        def SUB(self):
            return self.getToken(JavaParser.SUB, 0)

        def unaryExpressionNotPlusMinus(self):
            return self.getTypedRuleContext(JavaParser.UnaryExpressionNotPlusMinusContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_unaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)




    def unaryExpression(self):

        localctx = JavaParser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_unaryExpression)
        try:
            self.state = 1073
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.INC]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1066
                self.preIncrementExpression()
                pass
            elif token in [JavaParser.DEC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1067
                self.preDecrementExpression()
                pass
            elif token in [JavaParser.ADD]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1068
                self.match(JavaParser.ADD)
                self.state = 1069
                self.unaryExpression()
                pass
            elif token in [JavaParser.SUB]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1070
                self.match(JavaParser.SUB)
                self.state = 1071
                self.unaryExpression()
                pass
            elif token in [JavaParser.HEX_NUMERAL, JavaParser.OCTAL_NUMERAL, JavaParser.NUMERO, JavaParser.LOGICAL, JavaParser.NEW, JavaParser.THIS, JavaParser.AP, JavaParser.EXCLAMACAO, JavaParser.NOT, JavaParser.ASPAS, JavaParser.STRING, JavaParser.ID, JavaParser.DIGITO, JavaParser.NULL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1072
                self.unaryExpressionNotPlusMinus()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PreDecrementExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEC(self):
            return self.getToken(JavaParser.DEC, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(JavaParser.UnaryExpressionContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_preDecrementExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreDecrementExpression" ):
                listener.enterPreDecrementExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreDecrementExpression" ):
                listener.exitPreDecrementExpression(self)




    def preDecrementExpression(self):

        localctx = JavaParser.PreDecrementExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_preDecrementExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1075
            self.match(JavaParser.DEC)
            self.state = 1076
            self.unaryExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PreIncrementExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INC(self):
            return self.getToken(JavaParser.INC, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(JavaParser.UnaryExpressionContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_preIncrementExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreIncrementExpression" ):
                listener.enterPreIncrementExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreIncrementExpression" ):
                listener.exitPreIncrementExpression(self)




    def preIncrementExpression(self):

        localctx = JavaParser.PreIncrementExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_preIncrementExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1078
            self.match(JavaParser.INC)
            self.state = 1079
            self.unaryExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryExpressionNotPlusMinusContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(JavaParser.PostfixExpressionContext,0)


        def NOT(self):
            return self.getToken(JavaParser.NOT, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(JavaParser.UnaryExpressionContext,0)


        def castExpression(self):
            return self.getTypedRuleContext(JavaParser.CastExpressionContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_unaryExpressionNotPlusMinus

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpressionNotPlusMinus" ):
                listener.enterUnaryExpressionNotPlusMinus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpressionNotPlusMinus" ):
                listener.exitUnaryExpressionNotPlusMinus(self)




    def unaryExpressionNotPlusMinus(self):

        localctx = JavaParser.UnaryExpressionNotPlusMinusContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_unaryExpressionNotPlusMinus)
        try:
            self.state = 1087
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1081
                self.postfixExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1082
                self.match(JavaParser.NOT)
                self.state = 1083
                self.unaryExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1084
                self.match(JavaParser.EXCLAMACAO)
                self.state = 1085
                self.unaryExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1086
                self.castExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostdecrementExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(JavaParser.PostfixExpressionContext,0)


        def DEC(self):
            return self.getToken(JavaParser.DEC, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_postdecrementExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostdecrementExpression" ):
                listener.enterPostdecrementExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostdecrementExpression" ):
                listener.exitPostdecrementExpression(self)




    def postdecrementExpression(self):

        localctx = JavaParser.PostdecrementExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_postdecrementExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1089
            self.postfixExpression()
            self.state = 1090
            self.match(JavaParser.DEC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostincrementExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(JavaParser.PostfixExpressionContext,0)


        def INC(self):
            return self.getToken(JavaParser.INC, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_postincrementExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostincrementExpression" ):
                listener.enterPostincrementExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostincrementExpression" ):
                listener.exitPostincrementExpression(self)




    def postincrementExpression(self):

        localctx = JavaParser.PostincrementExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_postincrementExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1092
            self.postfixExpression()
            self.state = 1093
            self.match(JavaParser.INC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostfixExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary(self):
            return self.getTypedRuleContext(JavaParser.PrimaryContext,0)


        def expressionName(self):
            return self.getTypedRuleContext(JavaParser.ExpressionNameContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_postfixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)




    def postfixExpression(self):

        localctx = JavaParser.PostfixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_postfixExpression)
        try:
            self.state = 1097
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.HEX_NUMERAL, JavaParser.OCTAL_NUMERAL, JavaParser.NUMERO, JavaParser.LOGICAL, JavaParser.NEW, JavaParser.THIS, JavaParser.AP, JavaParser.ASPAS, JavaParser.STRING, JavaParser.DIGITO, JavaParser.NULL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1095
                self.primary()
                pass
            elif token in [JavaParser.ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1096
                self.expressionName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MethodInvocationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def methodName(self):
            return self.getTypedRuleContext(JavaParser.MethodNameContext,0)


        def AP(self):
            return self.getToken(JavaParser.AP, 0)

        def FP(self):
            return self.getToken(JavaParser.FP, 0)

        def argumentlist(self):
            return self.getTypedRuleContext(JavaParser.ArgumentlistContext,0)


        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def PONTO(self):
            return self.getToken(JavaParser.PONTO, 0)

        def ID(self):
            return self.getToken(JavaParser.ID, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_methodInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodInvocation" ):
                listener.enterMethodInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodInvocation" ):
                listener.exitMethodInvocation(self)




    def methodInvocation(self):

        localctx = JavaParser.MethodInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_methodInvocation)
        self._la = 0 # Token type
        try:
            self.state = 1114
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1099
                self.methodName()
                self.state = 1100
                self.match(JavaParser.AP)
                self.state = 1102
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.HEX_NUMERAL) | (1 << JavaParser.OCTAL_NUMERAL) | (1 << JavaParser.NUMERO) | (1 << JavaParser.LOGICAL) | (1 << JavaParser.NEW) | (1 << JavaParser.EXTENDS) | (1 << JavaParser.THIS) | (1 << JavaParser.ADD) | (1 << JavaParser.SUB) | (1 << JavaParser.INC) | (1 << JavaParser.DEC))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (JavaParser.AP - 76)) | (1 << (JavaParser.EXCLAMACAO - 76)) | (1 << (JavaParser.NOT - 76)) | (1 << (JavaParser.ASPAS - 76)) | (1 << (JavaParser.STRING - 76)) | (1 << (JavaParser.ID - 76)) | (1 << (JavaParser.DIGITO - 76)) | (1 << (JavaParser.NULL - 76)))) != 0):
                    self.state = 1101
                    self.argumentlist()


                self.state = 1104
                self.match(JavaParser.FP)
                pass
            elif token in [JavaParser.SUPER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1106
                self.match(JavaParser.SUPER)
                self.state = 1107
                self.match(JavaParser.PONTO)
                self.state = 1108
                self.match(JavaParser.ID)
                self.state = 1109
                self.match(JavaParser.AP)
                self.state = 1111
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.HEX_NUMERAL) | (1 << JavaParser.OCTAL_NUMERAL) | (1 << JavaParser.NUMERO) | (1 << JavaParser.LOGICAL) | (1 << JavaParser.NEW) | (1 << JavaParser.EXTENDS) | (1 << JavaParser.THIS) | (1 << JavaParser.ADD) | (1 << JavaParser.SUB) | (1 << JavaParser.INC) | (1 << JavaParser.DEC))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (JavaParser.AP - 76)) | (1 << (JavaParser.EXCLAMACAO - 76)) | (1 << (JavaParser.NOT - 76)) | (1 << (JavaParser.ASPAS - 76)) | (1 << (JavaParser.STRING - 76)) | (1 << (JavaParser.ID - 76)) | (1 << (JavaParser.DIGITO - 76)) | (1 << (JavaParser.NULL - 76)))) != 0):
                    self.state = 1110
                    self.argumentlist()


                self.state = 1113
                self.match(JavaParser.FP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FieldAccessContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary(self):
            return self.getTypedRuleContext(JavaParser.PrimaryContext,0)


        def PONTO(self):
            return self.getToken(JavaParser.PONTO, 0)

        def ID(self):
            return self.getToken(JavaParser.ID, 0)

        def superRule(self):
            return self.getTypedRuleContext(JavaParser.SuperRuleContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_fieldAccess

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldAccess" ):
                listener.enterFieldAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldAccess" ):
                listener.exitFieldAccess(self)




    def fieldAccess(self):

        localctx = JavaParser.FieldAccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_fieldAccess)
        try:
            self.state = 1124
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.HEX_NUMERAL, JavaParser.OCTAL_NUMERAL, JavaParser.NUMERO, JavaParser.LOGICAL, JavaParser.NEW, JavaParser.THIS, JavaParser.AP, JavaParser.ASPAS, JavaParser.STRING, JavaParser.DIGITO, JavaParser.NULL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1116
                self.primary()
                self.state = 1117
                self.match(JavaParser.PONTO)
                self.state = 1118
                self.match(JavaParser.ID)
                pass
            elif token in [JavaParser.EXTENDS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1120
                self.superRule()
                self.state = 1121
                self.match(JavaParser.PONTO)
                self.state = 1122
                self.match(JavaParser.ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryNoNewArray(self):
            return self.getTypedRuleContext(JavaParser.PrimaryNoNewArrayContext,0)


        def arrayCreationExpression(self):
            return self.getTypedRuleContext(JavaParser.ArrayCreationExpressionContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)




    def primary(self):

        localctx = JavaParser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_primary)
        try:
            self.state = 1128
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1126
                self.primaryNoNewArray()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1127
                self.arrayCreationExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimaryNoNewArrayContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(JavaParser.LiteralContext,0)


        def THIS(self):
            return self.getToken(JavaParser.THIS, 0)

        def AP(self):
            return self.getToken(JavaParser.AP, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def FP(self):
            return self.getToken(JavaParser.FP, 0)

        def classInstanceCreationExpression(self):
            return self.getTypedRuleContext(JavaParser.ClassInstanceCreationExpressionContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_primaryNoNewArray

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryNoNewArray" ):
                listener.enterPrimaryNoNewArray(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryNoNewArray" ):
                listener.exitPrimaryNoNewArray(self)




    def primaryNoNewArray(self):

        localctx = JavaParser.PrimaryNoNewArrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_primaryNoNewArray)
        try:
            self.state = 1137
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.HEX_NUMERAL, JavaParser.OCTAL_NUMERAL, JavaParser.NUMERO, JavaParser.LOGICAL, JavaParser.ASPAS, JavaParser.STRING, JavaParser.DIGITO, JavaParser.NULL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1130
                self.literal()
                pass
            elif token in [JavaParser.THIS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1131
                self.match(JavaParser.THIS)
                pass
            elif token in [JavaParser.AP]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1132
                self.match(JavaParser.AP)
                self.state = 1133
                self.expression()
                self.state = 1134
                self.match(JavaParser.FP)
                pass
            elif token in [JavaParser.NEW]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1136
                self.classInstanceCreationExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassInstanceCreationExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(JavaParser.NEW, 0)

        def classType(self):
            return self.getTypedRuleContext(JavaParser.ClassTypeContext,0)


        def AP(self):
            return self.getToken(JavaParser.AP, 0)

        def FP(self):
            return self.getToken(JavaParser.FP, 0)

        def argumentlist(self):
            return self.getTypedRuleContext(JavaParser.ArgumentlistContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_classInstanceCreationExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassInstanceCreationExpression" ):
                listener.enterClassInstanceCreationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassInstanceCreationExpression" ):
                listener.exitClassInstanceCreationExpression(self)




    def classInstanceCreationExpression(self):

        localctx = JavaParser.ClassInstanceCreationExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_classInstanceCreationExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1139
            self.match(JavaParser.NEW)
            self.state = 1140
            self.classType()
            self.state = 1141
            self.match(JavaParser.AP)
            self.state = 1143
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << JavaParser.HEX_NUMERAL) | (1 << JavaParser.OCTAL_NUMERAL) | (1 << JavaParser.NUMERO) | (1 << JavaParser.LOGICAL) | (1 << JavaParser.NEW) | (1 << JavaParser.EXTENDS) | (1 << JavaParser.THIS) | (1 << JavaParser.ADD) | (1 << JavaParser.SUB) | (1 << JavaParser.INC) | (1 << JavaParser.DEC))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (JavaParser.AP - 76)) | (1 << (JavaParser.EXCLAMACAO - 76)) | (1 << (JavaParser.NOT - 76)) | (1 << (JavaParser.ASPAS - 76)) | (1 << (JavaParser.STRING - 76)) | (1 << (JavaParser.ID - 76)) | (1 << (JavaParser.DIGITO - 76)) | (1 << (JavaParser.NULL - 76)))) != 0):
                self.state = 1142
                self.argumentlist()


            self.state = 1145
            self.match(JavaParser.FP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)


        def VIRGULA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.VIRGULA)
            else:
                return self.getToken(JavaParser.VIRGULA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_argumentlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentlist" ):
                listener.enterArgumentlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentlist" ):
                listener.exitArgumentlist(self)




    def argumentlist(self):

        localctx = JavaParser.ArgumentlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_argumentlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1147
            self.expression()
            self.state = 1152
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==JavaParser.VIRGULA:
                self.state = 1148
                self.match(JavaParser.VIRGULA)
                self.state = 1149
                self.expression()
                self.state = 1154
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayCreationExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(JavaParser.NEW, 0)

        def primitiveType(self):
            return self.getTypedRuleContext(JavaParser.PrimitiveTypeContext,0)


        def dimExprs(self):
            return self.getTypedRuleContext(JavaParser.DimExprsContext,0)


        def dims(self):
            return self.getTypedRuleContext(JavaParser.DimsContext,0)


        def classOrInterfaceType(self):
            return self.getTypedRuleContext(JavaParser.ClassOrInterfaceTypeContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_arrayCreationExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayCreationExpression" ):
                listener.enterArrayCreationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayCreationExpression" ):
                listener.exitArrayCreationExpression(self)




    def arrayCreationExpression(self):

        localctx = JavaParser.ArrayCreationExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_arrayCreationExpression)
        try:
            self.state = 1167
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1155
                self.match(JavaParser.NEW)
                self.state = 1156
                self.primitiveType()
                self.state = 1157
                self.dimExprs()
                self.state = 1159
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                if la_ == 1:
                    self.state = 1158
                    self.dims()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1161
                self.match(JavaParser.NEW)
                self.state = 1162
                self.classOrInterfaceType()
                self.state = 1163
                self.dimExprs()
                self.state = 1165
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 1164
                    self.dims()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DimExprsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dimExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.DimExprContext)
            else:
                return self.getTypedRuleContext(JavaParser.DimExprContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_dimExprs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDimExprs" ):
                listener.enterDimExprs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDimExprs" ):
                listener.exitDimExprs(self)




    def dimExprs(self):

        localctx = JavaParser.DimExprsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_dimExprs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1170 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1169
                    self.dimExpr()

                else:
                    raise NoViableAltException(self)
                self.state = 1172 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DimExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AC(self):
            return self.getToken(JavaParser.AC, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def FC(self):
            return self.getToken(JavaParser.FC, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_dimExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDimExpr" ):
                listener.enterDimExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDimExpr" ):
                listener.exitDimExpr(self)




    def dimExpr(self):

        localctx = JavaParser.DimExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_dimExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1174
            self.match(JavaParser.AC)
            self.state = 1175
            self.expression()
            self.state = 1176
            self.match(JavaParser.FC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DimsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AC(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.AC)
            else:
                return self.getToken(JavaParser.AC, i)

        def FC(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.FC)
            else:
                return self.getToken(JavaParser.FC, i)

        def getRuleIndex(self):
            return JavaParser.RULE_dims

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDims" ):
                listener.enterDims(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDims" ):
                listener.exitDims(self)




    def dims(self):

        localctx = JavaParser.DimsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_dims)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1180 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1178
                    self.match(JavaParser.AC)
                    self.state = 1179
                    self.match(JavaParser.FC)

                else:
                    raise NoViableAltException(self)
                self.state = 1182 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayAccessContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionName(self):
            return self.getTypedRuleContext(JavaParser.ExpressionNameContext,0)


        def AC(self):
            return self.getToken(JavaParser.AC, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def FC(self):
            return self.getToken(JavaParser.FC, 0)

        def primaryNoNewArray(self):
            return self.getTypedRuleContext(JavaParser.PrimaryNoNewArrayContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_arrayAccess

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayAccess" ):
                listener.enterArrayAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayAccess" ):
                listener.exitArrayAccess(self)




    def arrayAccess(self):

        localctx = JavaParser.ArrayAccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_arrayAccess)
        try:
            self.state = 1194
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1184
                self.expressionName()
                self.state = 1185
                self.match(JavaParser.AC)
                self.state = 1186
                self.expression()
                self.state = 1187
                self.match(JavaParser.FC)
                pass
            elif token in [JavaParser.HEX_NUMERAL, JavaParser.OCTAL_NUMERAL, JavaParser.NUMERO, JavaParser.LOGICAL, JavaParser.NEW, JavaParser.THIS, JavaParser.AP, JavaParser.ASPAS, JavaParser.STRING, JavaParser.DIGITO, JavaParser.NULL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1189
                self.primaryNoNewArray()
                self.state = 1190
                self.match(JavaParser.AC)
                self.state = 1191
                self.expression()
                self.state = 1192
                self.match(JavaParser.FC)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PackageNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.ID)
            else:
                return self.getToken(JavaParser.ID, i)

        def PONTO(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.PONTO)
            else:
                return self.getToken(JavaParser.PONTO, i)

        def getRuleIndex(self):
            return JavaParser.RULE_packageName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackageName" ):
                listener.enterPackageName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackageName" ):
                listener.exitPackageName(self)




    def packageName(self):

        localctx = JavaParser.PackageNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_packageName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1196
            self.match(JavaParser.ID)
            self.state = 1201
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,118,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1197
                    self.match(JavaParser.PONTO)
                    self.state = 1198
                    self.match(JavaParser.ID) 
                self.state = 1203
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,118,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(JavaParser.ID, 0)

        def packageName(self):
            return self.getTypedRuleContext(JavaParser.PackageNameContext,0)


        def PONTO(self):
            return self.getToken(JavaParser.PONTO, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)




    def typeName(self):

        localctx = JavaParser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_typeName)
        try:
            self.state = 1209
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1204
                self.match(JavaParser.ID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1205
                self.packageName()
                self.state = 1206
                self.match(JavaParser.PONTO)
                self.state = 1207
                self.match(JavaParser.ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleTypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(JavaParser.ID, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_simpleTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleTypeName" ):
                listener.enterSimpleTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleTypeName" ):
                listener.exitSimpleTypeName(self)




    def simpleTypeName(self):

        localctx = JavaParser.SimpleTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_simpleTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1211
            self.match(JavaParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(JavaParser.ID, 0)

        def ambiguousName(self):
            return self.getTypedRuleContext(JavaParser.AmbiguousNameContext,0)


        def PONTO(self):
            return self.getToken(JavaParser.PONTO, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_expressionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionName" ):
                listener.enterExpressionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionName" ):
                listener.exitExpressionName(self)




    def expressionName(self):

        localctx = JavaParser.ExpressionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_expressionName)
        try:
            self.state = 1218
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1213
                self.match(JavaParser.ID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1214
                self.ambiguousName()
                self.state = 1215
                self.match(JavaParser.PONTO)
                self.state = 1216
                self.match(JavaParser.ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MethodNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(JavaParser.ID, 0)

        def ambiguousName(self):
            return self.getTypedRuleContext(JavaParser.AmbiguousNameContext,0)


        def PONTO(self):
            return self.getToken(JavaParser.PONTO, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_methodName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodName" ):
                listener.enterMethodName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodName" ):
                listener.exitMethodName(self)




    def methodName(self):

        localctx = JavaParser.MethodNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_methodName)
        try:
            self.state = 1225
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1220
                self.match(JavaParser.ID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1221
                self.ambiguousName()
                self.state = 1222
                self.match(JavaParser.PONTO)
                self.state = 1223
                self.match(JavaParser.ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AmbiguousNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.ID)
            else:
                return self.getToken(JavaParser.ID, i)

        def PONTO(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.PONTO)
            else:
                return self.getToken(JavaParser.PONTO, i)

        def getRuleIndex(self):
            return JavaParser.RULE_ambiguousName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmbiguousName" ):
                listener.enterAmbiguousName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmbiguousName" ):
                listener.exitAmbiguousName(self)




    def ambiguousName(self):

        localctx = JavaParser.AmbiguousNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_ambiguousName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1227
            self.match(JavaParser.ID)
            self.state = 1232
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,122,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1228
                    self.match(JavaParser.PONTO)
                    self.state = 1229
                    self.match(JavaParser.ID) 
                self.state = 1234
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerLiteral(self):
            return self.getTypedRuleContext(JavaParser.IntegerLiteralContext,0)


        def floatingPointLiteral(self):
            return self.getTypedRuleContext(JavaParser.FloatingPointLiteralContext,0)


        def booleanLiteral(self):
            return self.getTypedRuleContext(JavaParser.BooleanLiteralContext,0)


        def characterLiteral(self):
            return self.getTypedRuleContext(JavaParser.CharacterLiteralContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(JavaParser.StringLiteralContext,0)


        def nullLiteral(self):
            return self.getTypedRuleContext(JavaParser.NullLiteralContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = JavaParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_literal)
        try:
            self.state = 1241
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.HEX_NUMERAL, JavaParser.OCTAL_NUMERAL, JavaParser.NUMERO]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1235
                self.integerLiteral()
                pass
            elif token in [JavaParser.DIGITO]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1236
                self.floatingPointLiteral()
                pass
            elif token in [JavaParser.LOGICAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1237
                self.booleanLiteral()
                pass
            elif token in [JavaParser.ASPAS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1238
                self.characterLiteral()
                pass
            elif token in [JavaParser.STRING]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1239
                self.stringLiteral()
                pass
            elif token in [JavaParser.NULL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1240
                self.nullLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntegerLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decimalIntegerLiteral(self):
            return self.getTypedRuleContext(JavaParser.DecimalIntegerLiteralContext,0)


        def hexIntegerLiteral(self):
            return self.getTypedRuleContext(JavaParser.HexIntegerLiteralContext,0)


        def octalIntegerLiteral(self):
            return self.getTypedRuleContext(JavaParser.OctalIntegerLiteralContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_integerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerLiteral" ):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerLiteral" ):
                listener.exitIntegerLiteral(self)




    def integerLiteral(self):

        localctx = JavaParser.IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_integerLiteral)
        try:
            self.state = 1246
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [JavaParser.NUMERO]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1243
                self.decimalIntegerLiteral()
                pass
            elif token in [JavaParser.HEX_NUMERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1244
                self.hexIntegerLiteral()
                pass
            elif token in [JavaParser.OCTAL_NUMERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1245
                self.octalIntegerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecimalIntegerLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decimalNumeral(self):
            return self.getTypedRuleContext(JavaParser.DecimalNumeralContext,0)


        def INTEGER_TYPE_SUFFIX(self):
            return self.getToken(JavaParser.INTEGER_TYPE_SUFFIX, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_decimalIntegerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalIntegerLiteral" ):
                listener.enterDecimalIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalIntegerLiteral" ):
                listener.exitDecimalIntegerLiteral(self)




    def decimalIntegerLiteral(self):

        localctx = JavaParser.DecimalIntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_decimalIntegerLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1248
            self.decimalNumeral()
            self.state = 1250
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.state = 1249
                self.match(JavaParser.INTEGER_TYPE_SUFFIX)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HexIntegerLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEX_NUMERAL(self):
            return self.getToken(JavaParser.HEX_NUMERAL, 0)

        def INTEGER_TYPE_SUFFIX(self):
            return self.getToken(JavaParser.INTEGER_TYPE_SUFFIX, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_hexIntegerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHexIntegerLiteral" ):
                listener.enterHexIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHexIntegerLiteral" ):
                listener.exitHexIntegerLiteral(self)




    def hexIntegerLiteral(self):

        localctx = JavaParser.HexIntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_hexIntegerLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1252
            self.match(JavaParser.HEX_NUMERAL)
            self.state = 1254
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 1253
                self.match(JavaParser.INTEGER_TYPE_SUFFIX)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OctalIntegerLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OCTAL_NUMERAL(self):
            return self.getToken(JavaParser.OCTAL_NUMERAL, 0)

        def INTEGER_TYPE_SUFFIX(self):
            return self.getToken(JavaParser.INTEGER_TYPE_SUFFIX, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_octalIntegerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOctalIntegerLiteral" ):
                listener.enterOctalIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOctalIntegerLiteral" ):
                listener.exitOctalIntegerLiteral(self)




    def octalIntegerLiteral(self):

        localctx = JavaParser.OctalIntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_octalIntegerLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1256
            self.match(JavaParser.OCTAL_NUMERAL)
            self.state = 1258
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.state = 1257
                self.match(JavaParser.INTEGER_TYPE_SUFFIX)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecimalNumeralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERO(self):
            return self.getToken(JavaParser.NUMERO, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_decimalNumeral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalNumeral" ):
                listener.enterDecimalNumeral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalNumeral" ):
                listener.exitDecimalNumeral(self)




    def decimalNumeral(self):

        localctx = JavaParser.DecimalNumeralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_decimalNumeral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1260
            self.match(JavaParser.NUMERO)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DigitsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIGITO(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DIGITO)
            else:
                return self.getToken(JavaParser.DIGITO, i)

        def getRuleIndex(self):
            return JavaParser.RULE_digits

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDigits" ):
                listener.enterDigits(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDigits" ):
                listener.exitDigits(self)




    def digits(self):

        localctx = JavaParser.DigitsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_digits)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1263 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1262
                    self.match(JavaParser.DIGITO)

                else:
                    raise NoViableAltException(self)
                self.state = 1265 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FloatingPointLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def digits(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.DigitsContext)
            else:
                return self.getTypedRuleContext(JavaParser.DigitsContext,i)


        def PONTO(self):
            return self.getToken(JavaParser.PONTO, 0)

        def exponentPart(self):
            return self.getTypedRuleContext(JavaParser.ExponentPartContext,0)


        def floatTypeSuffix(self):
            return self.getTypedRuleContext(JavaParser.FloatTypeSuffixContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_floatingPointLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloatingPointLiteral" ):
                listener.enterFloatingPointLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloatingPointLiteral" ):
                listener.exitFloatingPointLiteral(self)




    def floatingPointLiteral(self):

        localctx = JavaParser.FloatingPointLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_floatingPointLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1267
            self.digits()
            self.state = 1268
            self.match(JavaParser.PONTO)
            self.state = 1270
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.state = 1269
                self.digits()


            self.state = 1273
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.state = 1272
                self.exponentPart()


            self.state = 1276
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.state = 1275
                self.floatTypeSuffix()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExponentPartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exponentIndicator(self):
            return self.getTypedRuleContext(JavaParser.ExponentIndicatorContext,0)


        def signedInteger(self):
            return self.getTypedRuleContext(JavaParser.SignedIntegerContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_exponentPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExponentPart" ):
                listener.enterExponentPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExponentPart" ):
                listener.exitExponentPart(self)




    def exponentPart(self):

        localctx = JavaParser.ExponentPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_exponentPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1278
            self.exponentIndicator()
            self.state = 1279
            self.signedInteger()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExponentIndicatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXP(self):
            return self.getToken(JavaParser.EXP, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_exponentIndicator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExponentIndicator" ):
                listener.enterExponentIndicator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExponentIndicator" ):
                listener.exitExponentIndicator(self)




    def exponentIndicator(self):

        localctx = JavaParser.ExponentIndicatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_exponentIndicator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1281
            self.match(JavaParser.EXP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SignedIntegerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def digits(self):
            return self.getTypedRuleContext(JavaParser.DigitsContext,0)


        def sign(self):
            return self.getTypedRuleContext(JavaParser.SignContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_signedInteger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignedInteger" ):
                listener.enterSignedInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignedInteger" ):
                listener.exitSignedInteger(self)




    def signedInteger(self):

        localctx = JavaParser.SignedIntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_signedInteger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1284
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==JavaParser.ADD or _la==JavaParser.SUB:
                self.state = 1283
                self.sign()


            self.state = 1286
            self.digits()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(JavaParser.ADD, 0)

        def SUB(self):
            return self.getToken(JavaParser.SUB, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_sign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSign" ):
                listener.enterSign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSign" ):
                listener.exitSign(self)




    def sign(self):

        localctx = JavaParser.SignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_sign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1288
            _la = self._input.LA(1)
            if not(_la==JavaParser.ADD or _la==JavaParser.SUB):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FloatTypeSuffixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT_S(self):
            return self.getToken(JavaParser.FLOAT_S, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_floatTypeSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloatTypeSuffix" ):
                listener.enterFloatTypeSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloatTypeSuffix" ):
                listener.exitFloatTypeSuffix(self)




    def floatTypeSuffix(self):

        localctx = JavaParser.FloatTypeSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_floatTypeSuffix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1290
            self.match(JavaParser.FLOAT_S)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BooleanLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOGICAL(self):
            return self.getToken(JavaParser.LOGICAL, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)




    def booleanLiteral(self):

        localctx = JavaParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_booleanLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1292
            self.match(JavaParser.LOGICAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CharacterLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASPAS(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.ASPAS)
            else:
                return self.getToken(JavaParser.ASPAS, i)

        def LETRA(self):
            return self.getToken(JavaParser.LETRA, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_characterLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacterLiteral" ):
                listener.enterCharacterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacterLiteral" ):
                listener.exitCharacterLiteral(self)




    def characterLiteral(self):

        localctx = JavaParser.CharacterLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_characterLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1294
            self.match(JavaParser.ASPAS)
            self.state = 1295
            self.match(JavaParser.LETRA)
            self.state = 1296
            self.match(JavaParser.ASPAS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(JavaParser.STRING, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)




    def stringLiteral(self):

        localctx = JavaParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_stringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1298
            self.match(JavaParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NullLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(JavaParser.NULL, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_nullLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullLiteral" ):
                listener.enterNullLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullLiteral" ):
                listener.exitNullLiteral(self)




    def nullLiteral(self):

        localctx = JavaParser.NullLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_nullLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1300
            self.match(JavaParser.NULL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[2] = self.importDeclarations_sempred
        self._predicates[13] = self.classBodyDeclarations_sempred
        self._predicates[18] = self.constructorModifiers_sempred
        self._predicates[37] = self.methodModifiers_sempred
        self._predicates[51] = self.abstractMethodModifiers_sempred
        self._predicates[113] = self.equalityExpression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def importDeclarations_sempred(self, localctx:ImportDeclarationsContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def classBodyDeclarations_sempred(self, localctx:ClassBodyDeclarationsContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def constructorModifiers_sempred(self, localctx:ConstructorModifiersContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def methodModifiers_sempred(self, localctx:MethodModifiersContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 1)
         

    def abstractMethodModifiers_sempred(self, localctx:AbstractMethodModifiersContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 1)
         

    def equalityExpression_sempred(self, localctx:EqualityExpressionContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 1)
         




